(function() {
    var type_impls = Object.fromEntries([["backed_data",[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-Error\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#69\">source</a></span><a href=\"#impl-Debug-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#70\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Display-for-Error\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#1012\">source</a></span><a href=\"#impl-Display-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html\" title=\"trait core::fmt::Display\">Display</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#1013\">source</a><a href=\"#method.fmt\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, fmt: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.unit.html\">()</a>, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Error.html\" title=\"struct core::fmt::Error\">Error</a>&gt;</h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Display.html#tymethod.fmt\">Read more</a></div></details></div></details>","Display","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error-for-Error\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#1027\">source</a></span><a href=\"#impl-Error-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.description\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#1029\">source</a><a href=\"#method.description\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.description\" class=\"fn\">description</a>(&amp;self) -&gt; &amp;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.str.html\">str</a></h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.42.0: use the Display impl or to_string()</span></div></span><div class='docblock'> <a href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.description\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.cause\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#1038\">source</a><a href=\"#method.cause\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.cause\" class=\"fn\">cause</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a>&gt;</h4></section></summary><span class=\"item-info\"><div class=\"stab deprecated\"><span class=\"emoji\">ðŸ‘Ž</span><span>Deprecated since 1.33.0: replaced by Error::source, which can support downcasting</span></div></span></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.source\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#1047\">source</a><a href=\"#method.source\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source\" class=\"fn\">source</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + 'static)&gt;</h4></section></summary><div class='docblock'>Returns the lower-level source of this error, if any. <a href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.source\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.provide\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/core/error.rs.html#183\">source</a><a href=\"#method.provide\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.provide\" class=\"fn\">provide</a>&lt;'a&gt;(&amp;'a self, request: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/error/struct.Request.html\" title=\"struct core::error::Request\">Request</a>&lt;'a&gt;)</h4></section></summary><span class=\"item-info\"><div class=\"stab unstable\"><span class=\"emoji\">ðŸ”¬</span><span>This is a nightly-only experimental API. (<code>error_generic_member_access</code>)</span></div></span><div class='docblock'>Provides type-based access to context intended for error reports. <a href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html#method.provide\">Read more</a></div></details></div></details>","Error","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#520\">source</a><a href=\"#impl-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.new\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#548-550\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#tymethod.new\" class=\"fn\">new</a>&lt;E&gt;(kind: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html\" title=\"enum std::io::error::ErrorKind\">ErrorKind</a>, error: E) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.</p>\n<p>This function is used to generically create I/O errors which do not\noriginate from the OS itself. The <code>error</code> argument is an arbitrary\npayload which will be contained in this <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\"><code>Error</code></a>.</p>\n<p>Note that this function allocates memory on the heap.\nIf no extra payload is required, use the <code>From</code> conversion from\n<code>ErrorKind</code>.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{Error, ErrorKind};\n\n<span class=\"comment\">// errors can be created from strings\n</span><span class=\"kw\">let </span>custom_error = Error::new(ErrorKind::Other, <span class=\"string\">\"oh no!\"</span>);\n\n<span class=\"comment\">// errors can also be created from other errors\n</span><span class=\"kw\">let </span>custom_error2 = Error::new(ErrorKind::Interrupted, custom_error);\n\n<span class=\"comment\">// creating an error without payload (and without memory allocation)\n</span><span class=\"kw\">let </span>eof_error = Error::from(ErrorKind::UnexpectedEof);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.other\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.74.0\">1.74.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#573-575\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#tymethod.other\" class=\"fn\">other</a>&lt;E&gt;(error: E) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a><div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Creates a new I/O error from an arbitrary error payload.</p>\n<p>This function is used to generically create I/O errors which do not\noriginate from the OS itself. It is a shortcut for <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#method.new\" title=\"associated function std::io::error::Error::new\"><code>Error::new</code></a>\nwith <a href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html#variant.Other\" title=\"variant std::io::error::ErrorKind::Other\"><code>ErrorKind::Other</code></a>.</p>\n<h5 id=\"examples-1\"><a class=\"doc-anchor\" href=\"#examples-1\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::Error;\n\n<span class=\"comment\">// errors can be created from strings\n</span><span class=\"kw\">let </span>custom_error = Error::other(<span class=\"string\">\"oh no!\"</span>);\n\n<span class=\"comment\">// errors can also be created from other errors\n</span><span class=\"kw\">let </span>custom_error2 = Error::other(custom_error);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.last_os_error\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#623\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#tymethod.last_os_error\" class=\"fn\">last_os_error</a>() -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class=\"docblock\"><p>Returns an error representing the last OS error which occurred.</p>\n<p>This function reads the value of <code>errno</code> for the target platform (e.g.\n<code>GetLastError</code> on Windows) and will return a corresponding instance of\n<a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\"><code>Error</code></a> for the error code.</p>\n<p>This should be called immediately after a call to a platform function,\notherwise the state of the error value is indeterminate. In particular,\nother standard library functions may call platform functions that may\n(or may not) reset the error value even if they succeed.</p>\n<h5 id=\"examples-2\"><a class=\"doc-anchor\" href=\"#examples-2\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::Error;\n\n<span class=\"kw\">let </span>os_error = Error::last_os_error();\n<span class=\"macro\">println!</span>(<span class=\"string\">\"last OS error: {os_error:?}\"</span>);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_raw_os_error\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#655\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#tymethod.from_raw_os_error\" class=\"fn\">from_raw_os_error</a>(code: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class=\"docblock\"><p>Creates a new instance of an <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\"><code>Error</code></a> from a particular OS error code.</p>\n<h5 id=\"examples-3\"><a class=\"doc-anchor\" href=\"#examples-3\">Â§</a>Examples</h5>\n<p>On Linux:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">let </span>error = io::Error::from_raw_os_error(<span class=\"number\">22</span>);\n<span class=\"macro\">assert_eq!</span>(error.kind(), io::ErrorKind::InvalidInput);</code></pre></div>\n<p>On Windows:</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">let </span>error = io::Error::from_raw_os_error(<span class=\"number\">10022</span>);\n<span class=\"macro\">assert_eq!</span>(error.kind(), io::ErrorKind::InvalidInput);</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_os_error\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#691\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#tymethod.raw_os_error\" class=\"fn\">raw_os_error</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.i32.html\">i32</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Returns the OS error that this error represents (if any).</p>\n<p>If this <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\"><code>Error</code></a> was constructed via <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#method.last_os_error\" title=\"associated function std::io::error::Error::last_os_error\"><code>last_os_error</code></a> or\n<a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#method.from_raw_os_error\" title=\"associated function std::io::error::Error::from_raw_os_error\"><code>from_raw_os_error</code></a>, then this function will return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise\nit will return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-4\"><a class=\"doc-anchor\" href=\"#examples-4\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{Error, ErrorKind};\n\n<span class=\"kw\">fn </span>print_os_error(err: <span class=\"kw-2\">&amp;</span>Error) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(raw_os_err) = err.raw_os_error() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"raw OS error: {raw_os_err:?}\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Not an OS error\"</span>);\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"comment\">// Will print \"raw OS error: ...\".\n    </span>print_os_error(<span class=\"kw-2\">&amp;</span>Error::last_os_error());\n    <span class=\"comment\">// Will print \"Not an OS error\".\n    </span>print_os_error(<span class=\"kw-2\">&amp;</span>Error::new(ErrorKind::Other, <span class=\"string\">\"oh no!\"</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_ref\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#730\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#tymethod.get_ref\" class=\"fn\">get_ref</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;(dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static)&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a reference to the inner error wrapped by this error (if any).</p>\n<p>If this <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\"><code>Error</code></a> was constructed via <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#method.new\" title=\"associated function std::io::error::Error::new\"><code>new</code></a> then this function will\nreturn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise it will return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-5\"><a class=\"doc-anchor\" href=\"#examples-5\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{Error, ErrorKind};\n\n<span class=\"kw\">fn </span>print_error(err: <span class=\"kw-2\">&amp;</span>Error) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(inner_err) = err.get_ref() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Inner error: {inner_err:?}\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"No inner error\"</span>);\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"comment\">// Will print \"No inner error\".\n    </span>print_error(<span class=\"kw-2\">&amp;</span>Error::last_os_error());\n    <span class=\"comment\">// Will print \"Inner error: ...\".\n    </span>print_error(<span class=\"kw-2\">&amp;</span>Error::new(ErrorKind::Other, <span class=\"string\">\"oh no!\"</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.get_mut\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#804\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#tymethod.get_mut\" class=\"fn\">get_mut</a>(&amp;mut self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;&amp;mut (dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static)&gt;</h4></section></summary><div class=\"docblock\"><p>Returns a mutable reference to the inner error wrapped by this error\n(if any).</p>\n<p>If this <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\"><code>Error</code></a> was constructed via <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#method.new\" title=\"associated function std::io::error::Error::new\"><code>new</code></a> then this function will\nreturn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise it will return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-6\"><a class=\"doc-anchor\" href=\"#examples-6\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{Error, ErrorKind};\n<span class=\"kw\">use </span>std::{error, fmt};\n<span class=\"kw\">use </span>std::fmt::Display;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">struct </span>MyError {\n    v: String,\n}\n\n<span class=\"kw\">impl </span>MyError {\n    <span class=\"kw\">fn </span>new() -&gt; MyError {\n        MyError {\n            v: <span class=\"string\">\"oh no!\"</span>.to_string()\n        }\n    }\n\n    <span class=\"kw\">fn </span>change_message(<span class=\"kw-2\">&amp;mut </span><span class=\"self\">self</span>, new_message: <span class=\"kw-2\">&amp;</span>str) {\n        <span class=\"self\">self</span>.v = new_message.to_string();\n    }\n}\n\n<span class=\"kw\">impl </span>error::Error <span class=\"kw\">for </span>MyError {}\n\n<span class=\"kw\">impl </span>Display <span class=\"kw\">for </span>MyError {\n    <span class=\"kw\">fn </span>fmt(<span class=\"kw-2\">&amp;</span><span class=\"self\">self</span>, f: <span class=\"kw-2\">&amp;mut </span>fmt::Formatter&lt;<span class=\"lifetime\">'_</span>&gt;) -&gt; fmt::Result {\n        <span class=\"macro\">write!</span>(f, <span class=\"string\">\"MyError: {}\"</span>, <span class=\"self\">self</span>.v)\n    }\n}\n\n<span class=\"kw\">fn </span>change_error(<span class=\"kw-2\">mut </span>err: Error) -&gt; Error {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(inner_err) = err.get_mut() {\n        inner_err.downcast_mut::&lt;MyError&gt;().unwrap().change_message(<span class=\"string\">\"I've been changed!\"</span>);\n    }\n    err\n}\n\n<span class=\"kw\">fn </span>print_error(err: <span class=\"kw-2\">&amp;</span>Error) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(inner_err) = err.get_ref() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Inner error: {inner_err}\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"No inner error\"</span>);\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"comment\">// Will print \"No inner error\".\n    </span>print_error(<span class=\"kw-2\">&amp;</span>change_error(Error::last_os_error()));\n    <span class=\"comment\">// Will print \"Inner error: ...\".\n    </span>print_error(<span class=\"kw-2\">&amp;</span>change_error(Error::new(ErrorKind::Other, MyError::new())));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.into_inner\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.3.0\">1.3.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#843\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#tymethod.into_inner\" class=\"fn\">into_inner</a>(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html\" title=\"enum core::option::Option\">Option</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/boxed/struct.Box.html\" title=\"struct alloc::boxed::Box\">Box</a>&lt;dyn <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Consumes the <code>Error</code>, returning its inner error (if any).</p>\n<p>If this <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\"><code>Error</code></a> was constructed via <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#method.new\" title=\"associated function std::io::error::Error::new\"><code>new</code></a> then this function will\nreturn <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.Some\" title=\"variant core::option::Option::Some\"><code>Some</code></a>, otherwise it will return <a href=\"https://doc.rust-lang.org/nightly/core/option/enum.Option.html#variant.None\" title=\"variant core::option::Option::None\"><code>None</code></a>.</p>\n<h5 id=\"examples-7\"><a class=\"doc-anchor\" href=\"#examples-7\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{Error, ErrorKind};\n\n<span class=\"kw\">fn </span>print_error(err: Error) {\n    <span class=\"kw\">if let </span><span class=\"prelude-val\">Some</span>(inner_err) = err.into_inner() {\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"Inner error: {inner_err}\"</span>);\n    } <span class=\"kw\">else </span>{\n        <span class=\"macro\">println!</span>(<span class=\"string\">\"No inner error\"</span>);\n    }\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"comment\">// Will print \"No inner error\".\n    </span>print_error(Error::last_os_error());\n    <span class=\"comment\">// Will print \"Inner error: ...\".\n    </span>print_error(Error::new(ErrorKind::Other, <span class=\"string\">\"oh no!\"</span>));\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.downcast\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.79.0\">1.79.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#922-924\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#tymethod.downcast\" class=\"fn\">downcast</a>&lt;E&gt;(self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;E, <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a>&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/error/trait.Error.html\" title=\"trait core::error::Error\">Error</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,</div></h4></section></summary><div class=\"docblock\"><p>Attempts to downcast the custom boxed error to <code>E</code>.</p>\n<p>If this <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\"><code>Error</code></a> contains a custom boxed error,\nthen it would attempt downcasting on the boxed error,\notherwise it will return <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a>.</p>\n<p>If the custom boxed error has the same type as <code>E</code>, it will return <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Ok\" title=\"variant core::result::Result::Ok\"><code>Ok</code></a>,\notherwise it will also return <a href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html#variant.Err\" title=\"variant core::result::Result::Err\"><code>Err</code></a>.</p>\n<p>This method is meant to be a convenience routine for calling\n<code>Box&lt;dyn Error + Sync + Send&gt;::downcast</code> on the custom boxed error, returned by\n<a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#method.into_inner\" title=\"method std::io::error::Error::into_inner\"><code>Error::into_inner</code></a>.</p>\n<h5 id=\"examples-8\"><a class=\"doc-anchor\" href=\"#examples-8\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::fmt;\n<span class=\"kw\">use </span>std::io;\n<span class=\"kw\">use </span>std::error::Error;\n\n<span class=\"attr\">#[derive(Debug)]\n</span><span class=\"kw\">enum </span>E {\n    Io(io::Error),\n    SomeOtherVariant,\n}\n\n<span class=\"kw\">impl </span>fmt::Display <span class=\"kw\">for </span>E {\n   <span class=\"comment\">// ...\n</span>}\n<span class=\"kw\">impl </span>Error <span class=\"kw\">for </span>E {}\n\n<span class=\"kw\">impl </span>From&lt;io::Error&gt; <span class=\"kw\">for </span>E {\n    <span class=\"kw\">fn </span>from(err: io::Error) -&gt; E {\n        err.downcast::&lt;E&gt;()\n            .unwrap_or_else(E::Io)\n    }\n}\n\n<span class=\"kw\">impl </span>From&lt;E&gt; <span class=\"kw\">for </span>io::Error {\n    <span class=\"kw\">fn </span>from(err: E) -&gt; io::Error {\n        <span class=\"kw\">match </span>err {\n            E::Io(io_error) =&gt; io_error,\n            e =&gt; io::Error::new(io::ErrorKind::Other, e),\n        }\n    }\n}\n\n<span class=\"kw\">let </span>e = E::SomeOtherVariant;\n<span class=\"comment\">// Convert it to an io::Error\n</span><span class=\"kw\">let </span>io_error = io::Error::from(e);\n<span class=\"comment\">// Cast it back to the original variant\n</span><span class=\"kw\">let </span>e = E::from(io_error);\n<span class=\"macro\">assert!</span>(<span class=\"macro\">matches!</span>(e, E::SomeOtherVariant));\n\n<span class=\"kw\">let </span>io_error = io::Error::from(io::ErrorKind::AlreadyExists);\n<span class=\"comment\">// Convert it to E\n</span><span class=\"kw\">let </span>e = E::from(io_error);\n<span class=\"comment\">// Cast it back to the original variant\n</span><span class=\"kw\">let </span>io_error = io::Error::from(e);\n<span class=\"macro\">assert_eq!</span>(io_error.kind(), io::ErrorKind::AlreadyExists);\n<span class=\"macro\">assert!</span>(io_error.get_ref().is_none());\n<span class=\"macro\">assert!</span>(io_error.raw_os_error().is_none());</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.kind\" class=\"method\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#971\">source</a></span><h4 class=\"code-header\">pub fn <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#tymethod.kind\" class=\"fn\">kind</a>(&amp;self) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html\" title=\"enum std::io::error::ErrorKind\">ErrorKind</a></h4></section></summary><div class=\"docblock\"><p>Returns the corresponding <a href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html\" title=\"enum std::io::error::ErrorKind\"><code>ErrorKind</code></a> for this error.</p>\n<p>This may be a value set by Rust code constructing custom <code>io::Error</code>s,\nor if this <code>io::Error</code> was sourced from the operating system,\nit will be a value inferred from the systemâ€™s error encoding.\nSee <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html#method.last_os_error\" title=\"associated function std::io::error::Error::last_os_error\"><code>last_os_error</code></a> for more details.</p>\n<h5 id=\"examples-9\"><a class=\"doc-anchor\" href=\"#examples-9\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{Error, ErrorKind};\n\n<span class=\"kw\">fn </span>print_error(err: Error) {\n    <span class=\"macro\">println!</span>(<span class=\"string\">\"{:?}\"</span>, err.kind());\n}\n\n<span class=\"kw\">fn </span>main() {\n    <span class=\"comment\">// As no error has (visibly) occurred, this may print anything!\n    // It likely prints a placeholder for unidentified (non-)errors.\n    </span>print_error(Error::last_os_error());\n    <span class=\"comment\">// Will print \"AddrInUse\".\n    </span>print_error(Error::new(ErrorKind::AddrInUse, <span class=\"string\">\"oh no!\"</span>));\n}</code></pre></div>\n</div></details></div></details>",0,"backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CAsyncFdTryNewError%3CT%3E%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/io/async_fd.rs.html#1355\">source</a><a href=\"#impl-From%3CAsyncFdTryNewError%3CT%3E%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;T&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"tokio/io/async_fd/struct.AsyncFdTryNewError.html\" title=\"struct tokio::io::async_fd::AsyncFdTryNewError\">AsyncFdTryNewError</a>&lt;T&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/io/async_fd.rs.html#1356\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(value: <a class=\"struct\" href=\"tokio/io/async_fd/struct.AsyncFdTryNewError.html\" title=\"struct tokio::io::async_fd::AsyncFdTryNewError\">AsyncFdTryNewError</a>&lt;T&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<AsyncFdTryNewError<T>>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CElapsed%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/time/error.rs.html#119\">source</a><a href=\"#impl-From%3CElapsed%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"tokio/time/error/struct.Elapsed.html\" title=\"struct tokio::time::error::Elapsed\">Elapsed</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/time/error.rs.html#120\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(_err: <a class=\"struct\" href=\"tokio/time/error/struct.Elapsed.html\" title=\"struct tokio::time::error::Elapsed\">Elapsed</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Elapsed>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CErrno%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/nix/errno.rs.html#183\">source</a><a href=\"#impl-From%3CErrno%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"nix/errno/consts/enum.Errno.html\" title=\"enum nix::errno::consts::Errno\">Errno</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/nix/errno.rs.html#184\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: <a class=\"enum\" href=\"nix/errno/consts/enum.Errno.html\" title=\"enum nix::errno::consts::Errno\">Errno</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Errno>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CErrno%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/rustix/io/errno.rs.html#56\">source</a><a href=\"#impl-From%3CErrno%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"rustix/backend/io/errno/struct.Errno.html\" title=\"struct rustix::backend::io::errno::Errno\">Errno</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>std</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/rustix/io/errno.rs.html#58\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: <a class=\"struct\" href=\"rustix/backend/io/errno/struct.Errno.html\" title=\"struct rustix::backend::io::errno::Errno\">Errno</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Errno>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CError%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/csv/error.rs.html#130\">source</a><a href=\"#impl-From%3CError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"csv/error/struct.Error.html\" title=\"struct csv::error::Error\">Error</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/csv/error.rs.html#131\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: <a class=\"struct\" href=\"csv/error/struct.Error.html\" title=\"struct csv::error::Error\">Error</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Error>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CError%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/csv_async/error.rs.html#126\">source</a><a href=\"#impl-From%3CError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"csv_async/error/struct.Error.html\" title=\"struct csv_async::error::Error\">Error</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/csv_async/error.rs.html#127\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(err: <a class=\"struct\" href=\"csv_async/error/struct.Error.html\" title=\"struct csv_async::error::Error\">Error</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Error>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CError%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/serde_json/error.rs.html#189\">source</a><a href=\"#impl-From%3CError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>std</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/serde_json/error.rs.html#217\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(j: <a class=\"struct\" href=\"serde_json/error/struct.Error.html\" title=\"struct serde_json::error::Error\">Error</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class=\"docblock\"><p>Convert a <code>serde_json::Error</code> into an <code>io::Error</code>.</p>\n<p>JSON syntax and data errors are turned into <code>InvalidData</code> I/O errors.\nEOF errors are turned into <code>UnexpectedEof</code> I/O errors.</p>\n\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io;\n\n<span class=\"kw\">enum </span>MyError {\n    Io(io::Error),\n    Json(serde_json::Error),\n}\n\n<span class=\"kw\">impl </span>From&lt;serde_json::Error&gt; <span class=\"kw\">for </span>MyError {\n    <span class=\"kw\">fn </span>from(err: serde_json::Error) -&gt; MyError {\n        <span class=\"kw\">use </span>serde_json::error::Category;\n        <span class=\"kw\">match </span>err.classify() {\n            Category::Io =&gt; {\n                MyError::Io(err.into())\n            }\n            Category::Syntax | Category::Data | Category::Eof =&gt; {\n                MyError::Json(err)\n            }\n        }\n    }\n}</code></pre></div>\n</div></details></div></details>","From<Error>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CError%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/simd_json/error.rs.html#219\">source</a><a href=\"#impl-From%3CError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"simd_json/error/struct.Error.html\" title=\"struct simd_json::error::Error\">Error</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>non-<code>tarpaulin_include</code></strong> only.</div></span></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/simd_json/error.rs.html#220\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(e: <a class=\"struct\" href=\"simd_json/error/struct.Error.html\" title=\"struct simd_json::error::Error\">Error</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<Error>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CErrorKind%3E-for-Error\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.14.0\">1.14.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#500\">source</a></span><a href=\"#impl-From%3CErrorKind%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html\" title=\"enum std::io::error::ErrorKind\">ErrorKind</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"docblock\"><p>Intended for use for errors not exposed to the user, where allocating onto\nthe heap (for normal construction via Error::new) is too costly.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#515\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(kind: <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html\" title=\"enum std::io::error::ErrorKind\">ErrorKind</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class=\"docblock\"><p>Converts an <a href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html\" title=\"enum std::io::error::ErrorKind\"><code>ErrorKind</code></a> into an <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\"><code>Error</code></a>.</p>\n<p>This conversion creates a new error with a simple representation of error kind.</p>\n<h5 id=\"examples\"><a class=\"doc-anchor\" href=\"#examples\">Â§</a>Examples</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"kw\">use </span>std::io::{Error, ErrorKind};\n\n<span class=\"kw\">let </span>not_found = ErrorKind::NotFound;\n<span class=\"kw\">let </span>error = Error::from(not_found);\n<span class=\"macro\">assert_eq!</span>(<span class=\"string\">\"entity not found\"</span>, <span class=\"macro\">format!</span>(<span class=\"string\">\"{error}\"</span>));</code></pre></div>\n</div></details></div></details>","From<ErrorKind>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CErrorStack%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/openssl/error.rs.html#86\">source</a><a href=\"#impl-From%3CErrorStack%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"openssl/error/struct.ErrorStack.html\" title=\"struct openssl::error::ErrorStack\">ErrorStack</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/openssl/error.rs.html#87\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(e: <a class=\"struct\" href=\"openssl/error/struct.ErrorStack.html\" title=\"struct openssl::error::ErrorStack\">ErrorStack</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<ErrorStack>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CIntoInnerError%3CW%3E%3E-for-Error\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/buffered/mod.rs.html#175\">source</a></span><a href=\"#impl-From%3CIntoInnerError%3CW%3E%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl&lt;W&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/buffered/struct.IntoInnerError.html\" title=\"struct std::io::buffered::IntoInnerError\">IntoInnerError</a>&lt;W&gt;&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/buffered/mod.rs.html#176\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(iie: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/buffered/struct.IntoInnerError.html\" title=\"struct std::io::buffered::IntoInnerError\">IntoInnerError</a>&lt;W&gt;) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<IntoInnerError<W>>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CJoinError%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/task/error.rs.html#159\">source</a><a href=\"#impl-From%3CJoinError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"tokio/runtime/task/error/struct.JoinError.html\" title=\"struct tokio::runtime::task::error::JoinError\">JoinError</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/task/error.rs.html#160\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(src: <a class=\"struct\" href=\"tokio/runtime/task/error/struct.JoinError.html\" title=\"struct tokio::runtime::task::error::JoinError\">JoinError</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<JoinError>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CNulError%3E-for-Error\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#100\">source</a></span><a href=\"#impl-From%3CNulError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.NulError.html\" title=\"struct alloc::ffi::c_str::NulError\">NulError</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#102\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.NulError.html\" title=\"struct alloc::ffi::c_str::NulError\">NulError</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class=\"docblock\"><p>Converts a <a href=\"https://doc.rust-lang.org/nightly/alloc/ffi/c_str/struct.NulError.html\" title=\"struct alloc::ffi::c_str::NulError\"><code>alloc::ffi::NulError</code></a> into a <a href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\"><code>Error</code></a>.</p>\n</div></details></div></details>","From<NulError>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CSpawnError%3E-for-Error\" class=\"impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/blocking/pool.rs.html#143\">source</a><a href=\"#impl-From%3CSpawnError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;SpawnError&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/tokio/runtime/blocking/pool.rs.html#144\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(e: SpawnError) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class='docblock'>Converts to this type from the input type.</div></details></div></details>","From<SpawnError>","backed_data::entry::disks::async_file::AsyncError"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-From%3CTryReserveError%3E-for-Error\" class=\"impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.78.0\">1.78.0</span> Â· <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#108\">source</a></span><a href=\"#impl-From%3CTryReserveError%3E-for-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>&gt; for <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#113\">source</a><a href=\"#method.from\" class=\"anchor\">Â§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html#tymethod.from\" class=\"fn\">from</a>(_: <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/collections/struct.TryReserveError.html\" title=\"struct alloc::collections::TryReserveError\">TryReserveError</a>) -&gt; <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h4></section></summary><div class=\"docblock\"><p>Converts <code>TryReserveError</code> to an error with <a href=\"https://doc.rust-lang.org/nightly/std/io/error/enum.ErrorKind.html#variant.OutOfMemory\" title=\"variant std::io::error::ErrorKind::OutOfMemory\"><code>ErrorKind::OutOfMemory</code></a>.</p>\n<p><code>TryReserveError</code> wonâ€™t be available as the error <code>source()</code>,\nbut this may change in the future.</p>\n</div></details></div></details>","From<TryReserveError>","backed_data::entry::disks::async_file::AsyncError"],["<section id=\"impl-Error\" class=\"impl\"><a class=\"src rightside\" href=\"https://doc.rust-lang.org/nightly/src/std/io/error.rs.html#77\">source</a><a href=\"#impl-Error\" class=\"anchor\">Â§</a><h3 class=\"code-header\">impl <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/std/io/error/struct.Error.html\" title=\"struct std::io::error::Error\">Error</a></h3></section><div class=\"item-info\"><div class=\"stab empty-impl\">This impl block contains no items.</div></div><div class=\"docblock\"><p>Common errors constants for use in std</p>\n</div>",0,"backed_data::entry::disks::async_file::AsyncError"]]]]);
    if (window.register_type_impls) {
        window.register_type_impls(type_impls);
    } else {
        window.pending_type_impls = type_impls;
    }
})()
//{"start":55,"fragment_lengths":[67652]}