(function() {var type_impls = {
"backed_data":[["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#19-73\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead\">BackedEntryContainerNestedAsyncRead</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"docblock\"><p>Read implementations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.a_generic_get\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#67-72\">source</a><h4 class=\"code-header\">pub async fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.a_generic_get\" class=\"fn\">a_generic_get</a>(\n    &amp;self,\n    idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.InnerData\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::InnerData\">InnerData</a>&gt; + '_, <a class=\"enum\" href=\"backed_data/array/enum.BackedArrayError.html\" title=\"enum backed_data::array::BackedArrayError\">BackedArrayError</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html#associatedtype.AsyncReadError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead::AsyncReadError\">AsyncReadError</a>&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Async version of <a href=\"backed_data/array/struct.BackedArray.html#method.generic_get\" title=\"method backed_data::array::BackedArray::generic_get\"><code>Self::generic_get</code></a>.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#19-73\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead\">BackedEntryContainerNestedAsyncRead</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"docblock\"><p>Read implementations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.a_generic_get\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#67-72\">source</a><h4 class=\"code-header\">pub async fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.a_generic_get\" class=\"fn\">a_generic_get</a>(\n    &amp;self,\n    idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.InnerData\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::InnerData\">InnerData</a>&gt; + '_, <a class=\"enum\" href=\"backed_data/array/enum.BackedArrayError.html\" title=\"enum backed_data::array::BackedArrayError\">BackedArrayError</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html#associatedtype.AsyncReadError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead::AsyncReadError\">AsyncReadError</a>&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate features <code>async</code> and <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Async version of <a href=\"backed_data/array/struct.BackedArray.html#method.generic_get\" title=\"method backed_data::array::BackedArray::generic_get\"><code>Self::generic_get</code></a>.</p>\n</div></details></div></details>",0,"backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#252-310\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead\">BackedEntryContainerNestedAsyncRead</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_stream\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#261-263\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_stream\" class=\"fn\">generic_stream</a>(&amp;self) -&gt; <a class=\"struct\" href=\"backed_data/array/async_impl/generic/struct.BackedArrayFutIterGeneric.html\" title=\"struct backed_data::array::async_impl::generic::BackedArrayFutIterGeneric\">BackedArrayFutIterGeneric</a>&lt;'_, K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayFutIterGeneric&lt;&#39;_, K, E&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Future iterator over each backed item.</p>\n<p>Can be converted to a <a href=\"%60futures::Stream%60\"><code>Stream</code></a> with\n[<code>futures::stream::iter</code>]. This is not a stream by default because\n<a href=\"%60futures::Stream%60\"><code>Stream</code></a> does not have the iterator methods that\nallow efficient implementations.</p>\n<p>Use <a href=\"backed_data/array/struct.BackedArray.html#method.stream_send\" title=\"associated function backed_data::array::BackedArray::stream_send\"><code>Self::stream_send</code></a> for <a href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\"><code>Send</code></a> bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_stream_send\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#270-283\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_stream_send\" class=\"fn\">generic_stream_send</a>(\n    this: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Self&gt;,\n) -&gt; <a class=\"struct\" href=\"backed_data/array/async_impl/generic/struct.BackedArrayFutIterGenericSend.html\" title=\"struct backed_data::array::async_impl::generic::BackedArrayFutIterGenericSend\">BackedArrayFutIterGenericSend</a>&lt;K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayFutIterGenericSend&lt;K, E&gt;\">ⓘ</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    for&lt;'b&gt; K::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a> as <a class=\"trait\" href=\"backed_data/entry/disks/trait.AsyncReadDisk.html\" title=\"trait backed_data::entry::disks::AsyncReadDisk\">AsyncReadDisk</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/entry/disks/trait.AsyncReadDisk.html#associatedtype.ReadDisk\" title=\"type backed_data::entry::disks::AsyncReadDisk::ReadDisk\">ReadDisk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.OnceWrapper\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::OnceWrapper\">OnceWrapper</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    for&lt;'b&gt; E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    for&lt;'b&gt; &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a> as <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Version of <a href=\"backed_data/array/struct.BackedArray.html#method.stream\" title=\"method backed_data::array::BackedArray::stream\"><code>Self::stream</code></a> with <a href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\"><code>Send</code></a> bounds.</p>\n<p>If this type owns the disk (all library disks are owned), wrapping\nin an Arc and calling with <code>BackedArray::stream_send(&amp;this)</code> satisfies\nall of the bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_chunk_stream\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#291-309\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_chunk_stream\" class=\"fn\">generic_chunk_stream</a>(\n    &amp;self,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = &amp;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>&gt;, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html#associatedtype.AsyncReadError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead::AsyncReadError\">AsyncReadError</a>&gt;&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Future iterator over each chunk.</p>\n<p>Can be converted to a <a href=\"%60futures::Stream%60\"><code>Stream</code></a> with\n[<code>futures::stream::iter</code>]. This is not a stream by default because\n<a href=\"%60futures::Stream%60\"><code>Stream</code></a> does not have the iterator methods that\nallow efficient implementations.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#252-310\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead\">BackedEntryContainerNestedAsyncRead</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_stream\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#261-263\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_stream\" class=\"fn\">generic_stream</a>(&amp;self) -&gt; <a class=\"struct\" href=\"backed_data/array/async_impl/generic/struct.BackedArrayFutIterGeneric.html\" title=\"struct backed_data::array::async_impl::generic::BackedArrayFutIterGeneric\">BackedArrayFutIterGeneric</a>&lt;'_, K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayFutIterGeneric&lt;&#39;_, K, E&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate features <code>async</code> and <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Future iterator over each backed item.</p>\n<p>Can be converted to a <a href=\"%60futures::Stream%60\"><code>Stream</code></a> with\n[<code>futures::stream::iter</code>]. This is not a stream by default because\n<a href=\"%60futures::Stream%60\"><code>Stream</code></a> does not have the iterator methods that\nallow efficient implementations.</p>\n<p>Use <a href=\"backed_data/array/struct.BackedArray.html#method.stream_send\" title=\"associated function backed_data::array::BackedArray::stream_send\"><code>Self::stream_send</code></a> for <a href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\"><code>Send</code></a> bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_stream_send\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#270-283\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_stream_send\" class=\"fn\">generic_stream_send</a>(\n    this: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Self&gt;,\n) -&gt; <a class=\"struct\" href=\"backed_data/array/async_impl/generic/struct.BackedArrayFutIterGenericSend.html\" title=\"struct backed_data::array::async_impl::generic::BackedArrayFutIterGenericSend\">BackedArrayFutIterGenericSend</a>&lt;K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayFutIterGenericSend&lt;K, E&gt;\">ⓘ</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    for&lt;'b&gt; K::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a> as <a class=\"trait\" href=\"backed_data/entry/disks/trait.AsyncReadDisk.html\" title=\"trait backed_data::entry::disks::AsyncReadDisk\">AsyncReadDisk</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/entry/disks/trait.AsyncReadDisk.html#associatedtype.ReadDisk\" title=\"type backed_data::entry::disks::AsyncReadDisk::ReadDisk\">ReadDisk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.OnceWrapper\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::OnceWrapper\">OnceWrapper</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    for&lt;'b&gt; E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    for&lt;'b&gt; &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a> as <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate features <code>async</code> and <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Version of <a href=\"backed_data/array/struct.BackedArray.html#method.stream\" title=\"method backed_data::array::BackedArray::stream\"><code>Self::stream</code></a> with <a href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\"><code>Send</code></a> bounds.</p>\n<p>If this type owns the disk (all library disks are owned), wrapping\nin an Arc and calling with <code>BackedArray::stream_send(&amp;this)</code> satisfies\nall of the bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_chunk_stream\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/generic.rs.html#291-309\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_chunk_stream\" class=\"fn\">generic_chunk_stream</a>(\n    &amp;self,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = &amp;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>&gt;, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html#associatedtype.AsyncReadError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead::AsyncReadError\">AsyncReadError</a>&gt;&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate features <code>async</code> and <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Future iterator over each chunk.</p>\n<p>Can be converted to a <a href=\"%60futures::Stream%60\"><code>Stream</code></a> with\n[<code>futures::stream::iter</code>]. This is not a stream by default because\n<a href=\"%60futures::Stream%60\"><code>Stream</code></a> does not have the iterator methods that\nallow efficient implementations.</p>\n</div></details></div></details>",0,"backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/mod.rs.html#148-205\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;K::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>&gt;&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"type\" href=\"backed_data/entry/type.BackedEntryAsync.html\" title=\"type backed_data::entry::BackedEntryAsync\">BackedEntryAsync</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>&gt;&gt;&gt; + <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncWrite.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncWrite\">BackedEntryContainerNestedAsyncWrite</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.a_from_containers\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/mod.rs.html#159-204\">source</a><h4 class=\"code-header\">pub async fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.a_from_containers\" class=\"fn\">a_from_containers</a>&lt;C, I&gt;(\n    iter: I,\n    disk: &amp;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>,\n    coder: &amp;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a> as <a class=\"trait\" href=\"backed_data/entry/formats/trait.AsyncEncoder.html\" title=\"trait backed_data::entry::formats::AsyncEncoder\">AsyncEncoder</a>&lt;&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a> as <a class=\"trait\" href=\"backed_data/entry/disks/trait.AsyncWriteDisk.html\" title=\"trait backed_data::entry::disks::AsyncWriteDisk\">AsyncWriteDisk</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/entry/disks/trait.AsyncWriteDisk.html#associatedtype.WriteDisk\" title=\"type backed_data::entry::disks::AsyncWriteDisk::WriteDisk\">WriteDisk</a>&gt;&gt;::<a class=\"associatedtype\" href=\"backed_data/entry/formats/trait.AsyncEncoder.html#associatedtype.Error\" title=\"type backed_data::entry::formats::AsyncEncoder::Error\">Error</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = C&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Async version of <a href=\"backed_data/array/struct.BackedArray.html#method.from_containers\" title=\"associated function backed_data::array::BackedArray::from_containers\"><code>Self::from_containers</code></a>.</p>\n<p>Executes between 1 and [# iterator entries] write futures concurrently.\nKeeps all data in memory.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/mod.rs.html#148-205\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;K::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>&gt;&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"type\" href=\"backed_data/entry/type.BackedEntryAsync.html\" title=\"type backed_data::entry::BackedEntryAsync\">BackedEntryAsync</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>&gt;&gt;&gt; + <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncWrite.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncWrite\">BackedEntryContainerNestedAsyncWrite</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.a_from_containers\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/mod.rs.html#159-204\">source</a><h4 class=\"code-header\">pub async fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.a_from_containers\" class=\"fn\">a_from_containers</a>&lt;C, I&gt;(\n    iter: I,\n    disk: &amp;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>,\n    coder: &amp;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a> as <a class=\"trait\" href=\"backed_data/entry/formats/trait.AsyncEncoder.html\" title=\"trait backed_data::entry::formats::AsyncEncoder\">AsyncEncoder</a>&lt;&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a> as <a class=\"trait\" href=\"backed_data/entry/disks/trait.AsyncWriteDisk.html\" title=\"trait backed_data::entry::disks::AsyncWriteDisk\">AsyncWriteDisk</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/entry/disks/trait.AsyncWriteDisk.html#associatedtype.WriteDisk\" title=\"type backed_data::entry::disks::AsyncWriteDisk::WriteDisk\">WriteDisk</a>&gt;&gt;::<a class=\"associatedtype\" href=\"backed_data/entry/formats/trait.AsyncEncoder.html#associatedtype.Error\" title=\"type backed_data::entry::formats::AsyncEncoder::Error\">Error</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = C&gt;,</div></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>async</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Async version of <a href=\"backed_data/array/struct.BackedArray.html#method.from_containers\" title=\"associated function backed_data::array::BackedArray::from_containers\"><code>Self::from_containers</code></a>.</p>\n<p>Executes between 1 and [# iterator entries] write futures concurrently.\nKeeps all data in memory.</p>\n</div></details></div></details>",0,"backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/mod.rs.html#208-317\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.ResizingContainer.html\" title=\"trait backed_data::array::container::ResizingContainer\">ResizingContainer</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncWrite.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncWrite\">BackedEntryContainerNestedAsyncWrite</a> + <a class=\"trait\" href=\"backed_data/array/container/trait.ResizingContainer.html\" title=\"trait backed_data::array::container::ResizingContainer\">ResizingContainer</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.a_append\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/mod.rs.html#248-265\">source</a><h4 class=\"code-header\">pub async fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.a_append\" class=\"fn\">a_append</a>&lt;U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>&gt;&gt;(\n    &amp;mut self,\n    values: U,\n    backing_store: E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>,\n    coder: E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncWrite.html#associatedtype.AsyncWriteError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncWrite::AsyncWriteError\">AsyncWriteError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds new values by writing them to the backing store.</p>\n<p>Does not keep the values in memory.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[cfg(feature = <span class=\"string\">\"async_bincode\"</span>)] </span>{\n<span class=\"kw\">use </span>backed_data::{\n    array::async_impl::AsyncVecBackedArray,\n    entry::{\n        disks::Plainfile,\n        formats::AsyncBincodeCoder,\n    }\n};\n<span class=\"kw\">use </span>std::fs::{File, create_dir_all, remove_dir_all, OpenOptions};\n\n<span class=\"kw\">use </span>tokio::runtime::Builder;\n\n<span class=\"kw\">let </span>rt = Builder::new_current_thread().build().unwrap();\n\n<span class=\"kw\">let </span>FILENAME_BASE = std::env::temp_dir().join(<span class=\"string\">\"example_async_array_append\"</span>);\n<span class=\"kw\">let </span>values = ([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],\n    [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);\n\ncreate_dir_all(FILENAME_BASE.clone()).unwrap();\n<span class=\"kw\">let </span>file_0 = FILENAME_BASE.clone().join(<span class=\"string\">\"_0\"</span>);\n<span class=\"kw\">let </span>file_1 = FILENAME_BASE.join(<span class=\"string\">\"_1\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array: AsyncVecBackedArray&lt;u32, Plainfile, <span class=\"kw\">_</span>&gt; = AsyncVecBackedArray::default();\nrt.block_on(array.a_append(values.<span class=\"number\">0</span>, file_0.into(), AsyncBincodeCoder::default()));\nrt.block_on(array.a_append(values.<span class=\"number\">1</span>, file_1.into(), AsyncBincodeCoder::default()));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>rt.block_on(array.a_get(<span class=\"number\">4</span>)).unwrap(), <span class=\"number\">3</span>);\nremove_dir_all(FILENAME_BASE).unwrap();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.a_append_memory\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/mod.rs.html#299-316\">source</a><h4 class=\"code-header\">pub async fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.a_append_memory\" class=\"fn\">a_append_memory</a>&lt;U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>&gt;&gt;(\n    &amp;mut self,\n    values: U,\n    backing_store: E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>,\n    coder: E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncWrite.html#associatedtype.AsyncWriteError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncWrite::AsyncWriteError\">AsyncWriteError</a>&gt;</h4></section></summary><div class=\"docblock\"><p><a href=\"backed_data/array/struct.BackedArray.html#method.append\" title=\"method backed_data::array::BackedArray::append\"><code>Self::append</code></a>, but keeps values in memory.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[cfg(feature = <span class=\"string\">\"async_bincode\"</span>)] </span>{\n    <span class=\"kw\">use </span>backed_data::{\n        array::async_impl::AsyncVecBackedArray,\n        entry::{\n            disks::Plainfile,\n            formats::AsyncBincodeCoder,\n        },\n    };\n    <span class=\"kw\">use </span>std::fs::{File, remove_file, OpenOptions};\n\n    <span class=\"kw\">use </span>tokio::runtime::Builder;\n\n    <span class=\"kw\">let </span>rt = Builder::new_current_thread().build().unwrap();\n\n    <span class=\"kw\">let </span>FILENAME = std::env::temp_dir().join(<span class=\"string\">\"example_async_array_append_memory\"</span>);\n    <span class=\"kw\">let </span>values = ([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],\n        [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array: AsyncVecBackedArray&lt;u32, Plainfile, <span class=\"kw\">_</span>&gt; = AsyncVecBackedArray::default();\n    rt.block_on(array.a_append_memory(values.<span class=\"number\">0</span>, FILENAME.clone().into(), AsyncBincodeCoder::default()));\n\n    <span class=\"comment\">// Overwrite file, making disk pointer for first array invalid\n    </span>rt.block_on(array.a_append_memory(values.<span class=\"number\">1</span>, FILENAME.clone().into(), AsyncBincodeCoder::default()));\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>rt.block_on(array.a_get(<span class=\"number\">0</span>)).unwrap(), <span class=\"number\">0</span>);\n    remove_file(FILENAME).unwrap();\n}</code></pre></div>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/mod.rs.html#208-317\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.ResizingContainer.html\" title=\"trait backed_data::array::container::ResizingContainer\">ResizingContainer</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncWrite.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncWrite\">BackedEntryContainerNestedAsyncWrite</a> + <a class=\"trait\" href=\"backed_data/array/container/trait.ResizingContainer.html\" title=\"trait backed_data::array::container::ResizingContainer\">ResizingContainer</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.a_append\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/mod.rs.html#248-265\">source</a><h4 class=\"code-header\">pub async fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.a_append\" class=\"fn\">a_append</a>&lt;U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>&gt;&gt;(\n    &amp;mut self,\n    values: U,\n    backing_store: E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>,\n    coder: E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncWrite.html#associatedtype.AsyncWriteError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncWrite::AsyncWriteError\">AsyncWriteError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>async</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Adds new values by writing them to the backing store.</p>\n<p>Does not keep the values in memory.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[cfg(feature = <span class=\"string\">\"async_bincode\"</span>)] </span>{\n<span class=\"kw\">use </span>backed_data::{\n    array::async_impl::AsyncVecBackedArray,\n    entry::{\n        disks::Plainfile,\n        formats::AsyncBincodeCoder,\n    }\n};\n<span class=\"kw\">use </span>std::fs::{File, create_dir_all, remove_dir_all, OpenOptions};\n\n<span class=\"kw\">use </span>tokio::runtime::Builder;\n\n<span class=\"kw\">let </span>rt = Builder::new_current_thread().build().unwrap();\n\n<span class=\"kw\">let </span>FILENAME_BASE = std::env::temp_dir().join(<span class=\"string\">\"example_async_array_append\"</span>);\n<span class=\"kw\">let </span>values = ([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],\n    [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);\n\ncreate_dir_all(FILENAME_BASE.clone()).unwrap();\n<span class=\"kw\">let </span>file_0 = FILENAME_BASE.clone().join(<span class=\"string\">\"_0\"</span>);\n<span class=\"kw\">let </span>file_1 = FILENAME_BASE.join(<span class=\"string\">\"_1\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array: AsyncVecBackedArray&lt;u32, Plainfile, <span class=\"kw\">_</span>&gt; = AsyncVecBackedArray::default();\nrt.block_on(array.a_append(values.<span class=\"number\">0</span>, file_0.into(), AsyncBincodeCoder::default()));\nrt.block_on(array.a_append(values.<span class=\"number\">1</span>, file_1.into(), AsyncBincodeCoder::default()));\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>rt.block_on(array.a_get(<span class=\"number\">4</span>)).unwrap(), <span class=\"number\">3</span>);\nremove_dir_all(FILENAME_BASE).unwrap();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.a_append_memory\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/mod.rs.html#299-316\">source</a><h4 class=\"code-header\">pub async fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.a_append_memory\" class=\"fn\">a_append_memory</a>&lt;U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>&gt;&gt;(\n    &amp;mut self,\n    values: U,\n    backing_store: E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>,\n    coder: E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncWrite.html#associatedtype.AsyncWriteError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncWrite::AsyncWriteError\">AsyncWriteError</a>&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>async</code></strong> only.</div></span></summary><div class=\"docblock\"><p><a href=\"backed_data/array/struct.BackedArray.html#method.append\" title=\"method backed_data::array::BackedArray::append\"><code>Self::append</code></a>, but keeps values in memory.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[cfg(feature = <span class=\"string\">\"async_bincode\"</span>)] </span>{\n    <span class=\"kw\">use </span>backed_data::{\n        array::async_impl::AsyncVecBackedArray,\n        entry::{\n            disks::Plainfile,\n            formats::AsyncBincodeCoder,\n        },\n    };\n    <span class=\"kw\">use </span>std::fs::{File, remove_file, OpenOptions};\n\n    <span class=\"kw\">use </span>tokio::runtime::Builder;\n\n    <span class=\"kw\">let </span>rt = Builder::new_current_thread().build().unwrap();\n\n    <span class=\"kw\">let </span>FILENAME = std::env::temp_dir().join(<span class=\"string\">\"example_async_array_append_memory\"</span>);\n    <span class=\"kw\">let </span>values = ([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],\n        [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array: AsyncVecBackedArray&lt;u32, Plainfile, <span class=\"kw\">_</span>&gt; = AsyncVecBackedArray::default();\n    rt.block_on(array.a_append_memory(values.<span class=\"number\">0</span>, FILENAME.clone().into(), AsyncBincodeCoder::default()));\n\n    <span class=\"comment\">// Overwrite file, making disk pointer for first array invalid\n    </span>rt.block_on(array.a_append_memory(values.<span class=\"number\">1</span>, FILENAME.clone().into(), AsyncBincodeCoder::default()));\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>rt.block_on(array.a_get(<span class=\"number\">0</span>)).unwrap(), <span class=\"number\">0</span>);\n    remove_file(FILENAME).unwrap();\n}</code></pre></div>\n</div></details></div></details>",0,"backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#13-38\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead\">BackedEntryContainerNestedAsyncRead</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.InnerData\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::InnerData\">InnerData</a>]&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Read implementations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.a_get\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#19-37\">source</a><h4 class=\"code-header\">pub async fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.a_get\" class=\"fn\">a_get</a>(\n    &amp;self,\n    idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.InnerData\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::InnerData\">InnerData</a>, <a class=\"enum\" href=\"backed_data/array/enum.BackedArrayError.html\" title=\"enum backed_data::array::BackedArrayError\">BackedArrayError</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html#associatedtype.AsyncReadError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead::AsyncReadError\">AsyncReadError</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Async version of <a href=\"backed_data/array/struct.BackedArray.html#method.get\" title=\"method backed_data::array::BackedArray::get\"><code>Self::get</code></a>.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#13-38\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead\">BackedEntryContainerNestedAsyncRead</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.InnerData\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::InnerData\">InnerData</a>]&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Read implementations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.a_get\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#19-37\">source</a><h4 class=\"code-header\">pub async fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.a_get\" class=\"fn\">a_get</a>(\n    &amp;self,\n    idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.InnerData\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::InnerData\">InnerData</a>, <a class=\"enum\" href=\"backed_data/array/enum.BackedArrayError.html\" title=\"enum backed_data::array::BackedArrayError\">BackedArrayError</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html#associatedtype.AsyncReadError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead::AsyncReadError\">AsyncReadError</a>&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>async</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Async version of <a href=\"backed_data/array/struct.BackedArray.html#method.get\" title=\"method backed_data::array::BackedArray::get\"><code>Self::get</code></a>.</p>\n</div></details></div></details>",0,"backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#204-239\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead\">BackedEntryContainerNestedAsyncRead</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.InnerData\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::InnerData\">InnerData</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#216-218\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.stream\" class=\"fn\">stream</a>(&amp;self) -&gt; <a class=\"struct\" href=\"backed_data/array/async_impl/slice/struct.BackedArrayFutIter.html\" title=\"struct backed_data::array::async_impl::slice::BackedArrayFutIter\">BackedArrayFutIter</a>&lt;'_, K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayFutIter&lt;&#39;_, K, E&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Future iterator over each backed item.</p>\n<p>Can be converted to a <a href=\"%60futures::Stream%60\"><code>Stream</code></a> with [<code>futures::stream::iter</code>]. This is not a\nstream by default because <a href=\"%60futures::Stream%60\"><code>Stream</code></a> does not have the iterator methods\nthat allow efficient implementations.</p>\n<p>Use <a href=\"backed_data/array/struct.BackedArray.html#method.stream_send\" title=\"associated function backed_data::array::BackedArray::stream_send\"><code>Self::stream_send</code></a> for <code>+ Send</code> bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_send\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#225-238\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.stream_send\" class=\"fn\">stream_send</a>(this: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Self&gt;) -&gt; <a class=\"struct\" href=\"backed_data/array/async_impl/slice/struct.BackedArrayFutIterSend.html\" title=\"struct backed_data::array::async_impl::slice::BackedArrayFutIterSend\">BackedArrayFutIterSend</a>&lt;K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayFutIterSend&lt;K, E&gt;\">ⓘ</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    for&lt;'b&gt; K::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a> as <a class=\"trait\" href=\"backed_data/entry/disks/trait.AsyncReadDisk.html\" title=\"trait backed_data::entry::disks::AsyncReadDisk\">AsyncReadDisk</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/entry/disks/trait.AsyncReadDisk.html#associatedtype.ReadDisk\" title=\"type backed_data::entry::disks::AsyncReadDisk::ReadDisk\">ReadDisk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.OnceWrapper\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::OnceWrapper\">OnceWrapper</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    for&lt;'b&gt; E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    for&lt;'b&gt; &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a> as <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section></summary><div class=\"docblock\"><p>Version of <a href=\"backed_data/array/struct.BackedArray.html#method.stream\" title=\"method backed_data::array::BackedArray::stream\"><code>Self::stream</code></a> with <code>+ Send</code> bounds.</p>\n<p>If this type owns the disk (all library disks are owned), wrapping\nin an Arc and calling with <code>BackedArray::stream_send(&amp;this)</code> satisfies\nall of the bounds.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#204-239\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead\">BackedEntryContainerNestedAsyncRead</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.InnerData\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::InnerData\">InnerData</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#216-218\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.stream\" class=\"fn\">stream</a>(&amp;self) -&gt; <a class=\"struct\" href=\"backed_data/array/async_impl/slice/struct.BackedArrayFutIter.html\" title=\"struct backed_data::array::async_impl::slice::BackedArrayFutIter\">BackedArrayFutIter</a>&lt;'_, K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayFutIter&lt;&#39;_, K, E&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>async</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Future iterator over each backed item.</p>\n<p>Can be converted to a <a href=\"%60futures::Stream%60\"><code>Stream</code></a> with [<code>futures::stream::iter</code>]. This is not a\nstream by default because <a href=\"%60futures::Stream%60\"><code>Stream</code></a> does not have the iterator methods\nthat allow efficient implementations.</p>\n<p>Use <a href=\"backed_data/array/struct.BackedArray.html#method.stream_send\" title=\"associated function backed_data::array::BackedArray::stream_send\"><code>Self::stream_send</code></a> for <code>+ Send</code> bounds.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.stream_send\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#225-238\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.stream_send\" class=\"fn\">stream_send</a>(this: &amp;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/sync/struct.Arc.html\" title=\"struct alloc::sync::Arc\">Arc</a>&lt;Self&gt;) -&gt; <a class=\"struct\" href=\"backed_data/array/async_impl/slice/struct.BackedArrayFutIterSend.html\" title=\"struct backed_data::array::async_impl::slice::BackedArrayFutIterSend\">BackedArrayFutIterSend</a>&lt;K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayFutIterSend&lt;K, E&gt;\">ⓘ</a><div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    for&lt;'b&gt; K::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a> + 'static,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Coder\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Coder\">Coder</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Disk\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Disk\">Disk</a> as <a class=\"trait\" href=\"backed_data/entry/disks/trait.AsyncReadDisk.html\" title=\"trait backed_data::entry::disks::AsyncReadDisk\">AsyncReadDisk</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/entry/disks/trait.AsyncReadDisk.html#associatedtype.ReadDisk\" title=\"type backed_data::entry::disks::AsyncReadDisk::ReadDisk\">ReadDisk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.OnceWrapper\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::OnceWrapper\">OnceWrapper</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    for&lt;'b&gt; E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,\n    for&lt;'b&gt; &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a> as <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Ref\" title=\"type backed_data::array::container::Container::Ref\">Ref</a>&lt;'b&gt;: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Send.html\" title=\"trait core::marker::Send\">Send</a> + <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/marker/trait.Sync.html\" title=\"trait core::marker::Sync\">Sync</a>,</div></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>async</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Version of <a href=\"backed_data/array/struct.BackedArray.html#method.stream\" title=\"method backed_data::array::BackedArray::stream\"><code>Self::stream</code></a> with <code>+ Send</code> bounds.</p>\n<p>If this type owns the disk (all library disks are owned), wrapping\nin an Arc and calling with <code>BackedArray::stream_send(&amp;this)</code> satisfies\nall of the bounds.</p>\n</div></details></div></details>",0,"backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#241-258\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead\">BackedEntryContainerNestedAsyncRead</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunk_stream\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#250-257\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.chunk_stream\" class=\"fn\">chunk_stream</a>(\n    &amp;self,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html#associatedtype.AsyncReadError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead::AsyncReadError\">AsyncReadError</a>&gt;&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Future iterator over each chunk.</p>\n<p>Can be converted to a <a href=\"%60futures::Stream%60\"><code>Stream</code></a> with [<code>futures::stream::iter</code>]. This is not a\nstream by default because <a href=\"%60futures::Stream%60\"><code>Stream</code></a> does not have the iterator methods\nthat allow efficient implementations.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#241-258\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html\" title=\"trait backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead\">BackedEntryContainerNestedAsyncRead</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunk_stream\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/async_impl/slice.rs.html#250-257\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.chunk_stream\" class=\"fn\">chunk_stream</a>(\n    &amp;self,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/future/future/trait.Future.html\" title=\"trait core::future::future::Future\">Future</a>&lt;Output = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsync.html#associatedtype.Unwrapped\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsync::Unwrapped\">Unwrapped</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/async_impl/trait.BackedEntryContainerNestedAsyncRead.html#associatedtype.AsyncReadError\" title=\"type backed_data::array::async_impl::BackedEntryContainerNestedAsyncRead::AsyncReadError\">AsyncReadError</a>&gt;&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>async</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Future iterator over each chunk.</p>\n<p>Can be converted to a <a href=\"%60futures::Stream%60\"><code>Stream</code></a> with [<code>futures::stream::iter</code>]. This is not a\nstream by default because <a href=\"%60futures::Stream%60\"><code>Stream</code></a> does not have the iterator methods\nthat allow efficient implementations.</p>\n</div></details></div></details>",0,"backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#100-114\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, E: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunks_len\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#102-104\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.chunks_len\" class=\"fn\">chunks_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Number of underlying chunks.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.raw_chunks\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#107-109\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.raw_chunks\" class=\"fn\">raw_chunks</a>(&amp;mut self) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>&gt;&gt; + '_</h4></section></summary><div class=\"docblock\"><p>Access to the underlying chunks, without loading data.</p>\n</div></details><section id=\"method.is_empty\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#111-113\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.is_empty\" class=\"fn\">is_empty</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.bool.html\">bool</a></h4></section></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#52\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"docblock\"><p>Auto-generated by <code>derive_getters::Getters</code>.</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.key_starts\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#52\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.key_starts\" class=\"fn\">key_starts</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a></h4></section></summary><div class=\"docblock\"><p>Get field <code>key_starts</code> from instance of <code>BackedArray</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.key_ends\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#52\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.key_ends\" class=\"fn\">key_ends</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;K</a></h4></section></summary><div class=\"docblock\"><p>Get field <code>key_ends</code> from instance of <code>BackedArray</code>.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.entries\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#52\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.entries\" class=\"fn\">entries</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.reference.html\">&amp;E</a></h4></section></summary><div class=\"docblock\"><p>Get field <code>entries</code> from instance of <code>BackedArray</code>.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#87-91\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>, E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><section id=\"method.new\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#88-90\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.new\" class=\"fn\">new</a>() -&gt; Self</h4></section></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#93-98\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.len\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#95-97\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.len\" class=\"fn\">len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Total size of stored data.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/generic.rs.html#29-104\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedRead\">BackedEntryContainerNestedRead</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"docblock\"><p>Read implementations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_get\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/generic.rs.html#98-103\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_get\" class=\"fn\">generic_get</a>(\n    &amp;self,\n    idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.InnerData\" title=\"type backed_data::array::container::BackedEntryContainerNested::InnerData\">InnerData</a>&gt; + '_, <a class=\"enum\" href=\"backed_data/array/enum.BackedArrayError.html\" title=\"enum backed_data::array::BackedArrayError\">BackedArrayError</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html#associatedtype.ReadError\" title=\"type backed_data::array::container::BackedEntryContainerNestedRead::ReadError\">ReadError</a>&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p><a href=\"backed_data/array/struct.BackedArray.html#method.get\" title=\"method backed_data::array::BackedArray::get\"><code>Self::get</code></a> that works on containers that don’t directly dereference\nto slices.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/generic.rs.html#395-417\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedRead\">BackedEntryContainerNestedRead</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/generic.rs.html#398-400\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_iter\" class=\"fn\">generic_iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"backed_data/array/sync_impl/generic/struct.BackedArrayGenericIter.html\" title=\"struct backed_data::array::sync_impl::generic::BackedArrayGenericIter\">BackedArrayGenericIter</a>&lt;'_, K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayGenericIter&lt;&#39;_, K, E&gt;\">ⓘ</a></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p><a href=\"backed_data/array/struct.BackedArray.html#method.iter\" title=\"method backed_data::array::BackedArray::iter\"><code>Self::iter</code></a> that works on containers that don’t directly\ndereference to slices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_chunk_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/generic.rs.html#404-416\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_chunk_iter\" class=\"fn\">generic_chunk_iter</a>(\n    &amp;self,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = &amp;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Unwrapped\" title=\"type backed_data::array::container::BackedEntryContainerNested::Unwrapped\">Unwrapped</a>&gt;, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html#associatedtype.ReadError\" title=\"type backed_data::array::container::BackedEntryContainerNestedRead::ReadError\">ReadError</a>&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p><a href=\"backed_data/array/struct.BackedArray.html#method.chunk_iter\" title=\"method backed_data::array::BackedArray::chunk_iter\"><code>Self::chunk_iter</code></a> that works on containers that don’t directly\ndereference to slices.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/generic.rs.html#419-449\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedAll.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedAll\">BackedEntryContainerNestedAll</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/generic.rs.html#422-428\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_iter_mut\" class=\"fn\">generic_iter_mut</a>&lt;'a&gt;(&amp;'a mut self) -&gt; <a class=\"struct\" href=\"backed_data/array/sync_impl/generic/struct.BackedArrayGenericIterMut.html\" title=\"struct backed_data::array::sync_impl::generic::BackedArrayGenericIterMut\">BackedArrayGenericIterMut</a>&lt;'a, K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayGenericIterMut&lt;&#39;a, K, E&gt;\">ⓘ</a><div class=\"where\">where\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Unwrapped\" title=\"type backed_data::array::container::BackedEntryContainerNested::Unwrapped\">Unwrapped</a>: 'a,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html#associatedtype.ReadError\" title=\"type backed_data::array::container::BackedEntryContainerNestedRead::ReadError\">ReadError</a>: 'a,</div></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p><a href=\"backed_data/array/struct.BackedArray.html#method.iter_mut\" title=\"method backed_data::array::BackedArray::iter_mut\"><code>Self::iter_mut</code></a> that works on containers that don’t directly\ndereference to slices.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.generic_chunk_mut_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/generic.rs.html#432-448\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.generic_chunk_mut_iter\" class=\"fn\">generic_chunk_mut_iter</a>(\n    &amp;mut self,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/ops/deref/trait.Deref.html\" title=\"trait core::ops::deref::Deref\">Deref</a>&lt;Target = <a class=\"struct\" href=\"backed_data/entry/sync_impl/struct.BackedEntryMut.html\" title=\"struct backed_data::entry::sync_impl::BackedEntryMut\">BackedEntryMut</a>&lt;'_, <a class=\"struct\" href=\"backed_data/entry/struct.BackedEntry.html\" title=\"struct backed_data::entry::BackedEntry\">BackedEntry</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.OnceWrapper\" title=\"type backed_data::array::container::BackedEntryContainerNested::OnceWrapper\">OnceWrapper</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Disk\" title=\"type backed_data::array::container::BackedEntryContainerNested::Disk\">Disk</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Coder\" title=\"type backed_data::array::container::BackedEntryContainerNested::Coder\">Coder</a>&gt;&gt;&gt;, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html#associatedtype.ReadError\" title=\"type backed_data::array::container::BackedEntryContainerNestedRead::ReadError\">ReadError</a>&gt;&gt;</h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p><a href=\"backed_data/array/struct.BackedArray.html#method.chunk_mut_iter\" title=\"method backed_data::array::BackedArray::chunk_mut_iter\"><code>Self::chunk_mut_iter</code></a> that works on containers that don’t directly\ndereference to slices.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#188-225\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.ResizingContainer.html\" title=\"trait backed_data::array::container::ResizingContainer\">ResizingContainer</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html\" title=\"trait backed_data::array::container::BackedEntryContainerNested\">BackedEntryContainerNested</a> + <a class=\"trait\" href=\"backed_data/array/container/trait.ResizingContainer.html\" title=\"trait backed_data::array::container::ResizingContainer\">ResizingContainer</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.remove\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#194-224\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.remove\" class=\"fn\">remove</a>(&amp;mut self, entry_idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Removes an entry with the internal index, shifting ranges.</p>\n<p>The getter functions can be used to identify the target index.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#227-240\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.ResizingContainer.html\" title=\"trait backed_data::array::container::ResizingContainer\">ResizingContainer</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/container/trait.ResizingContainer.html\" title=\"trait backed_data::array::container::ResizingContainer\">ResizingContainer</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.merge\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#229-239\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.merge\" class=\"fn\">merge</a>(&amp;mut self, rhs: Self) -&gt; &amp;mut Self</h4></section></summary><div class=\"docblock\"><p>Move entries in <code>rhs</code> to <a href=\"backed_data/array/sync_impl/index.html\" title=\"mod backed_data::array::sync_impl\"><code>self</code></a>.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#242-284\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;K::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>&gt;&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;<a class=\"struct\" href=\"backed_data/entry/struct.BackedEntry.html\" title=\"struct backed_data::entry::BackedEntry\">BackedEntry</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.OnceWrapper\" title=\"type backed_data::array::container::BackedEntryContainerNested::OnceWrapper\">OnceWrapper</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Disk\" title=\"type backed_data::array::container::BackedEntryContainerNested::Disk\">Disk</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Coder\" title=\"type backed_data::array::container::BackedEntryContainerNested::Coder\">Coder</a>&gt;&gt;&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedWrite.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedWrite\">BackedEntryContainerNestedWrite</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Disk\" title=\"type backed_data::array::container::BackedEntryContainerNested::Disk\">Disk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Coder\" title=\"type backed_data::array::container::BackedEntryContainerNested::Coder\">Coder</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_containers\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#251-283\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.from_containers\" class=\"fn\">from_containers</a>&lt;C, I&gt;(\n    iter: I,\n    disk: &amp;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Disk\" title=\"type backed_data::array::container::BackedEntryContainerNested::Disk\">Disk</a>,\n    coder: &amp;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Coder\" title=\"type backed_data::array::container::BackedEntryContainerNested::Coder\">Coder</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, &lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Coder\" title=\"type backed_data::array::container::BackedEntryContainerNested::Coder\">Coder</a> as <a class=\"trait\" href=\"backed_data/entry/formats/trait.Encoder.html\" title=\"trait backed_data::entry::formats::Encoder\">Encoder</a>&lt;&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Disk\" title=\"type backed_data::array::container::BackedEntryContainerNested::Disk\">Disk</a> as <a class=\"trait\" href=\"backed_data/entry/disks/trait.WriteDisk.html\" title=\"trait backed_data::entry::disks::WriteDisk\">WriteDisk</a>&gt;::<a class=\"associatedtype\" href=\"backed_data/entry/disks/trait.WriteDisk.html#associatedtype.WriteDisk\" title=\"type backed_data::entry::disks::WriteDisk::WriteDisk\">WriteDisk</a>&gt;&gt;::<a class=\"associatedtype\" href=\"backed_data/entry/formats/trait.Encoder.html#associatedtype.Error\" title=\"type backed_data::entry::formats::Encoder::Error\">Error</a>&gt;<div class=\"where\">where\n    C: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Unwrapped\" title=\"type backed_data::array::container::BackedEntryContainerNested::Unwrapped\">Unwrapped</a>&gt;,\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = C&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Builds <a href=\"backed_data/array/sync_impl/index.html\" title=\"mod backed_data::array::sync_impl\"><code>self</code></a> from an iterator of containers, keeping them all loaded\nin memory.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#25-42\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, E: <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html\" title=\"trait backed_data::array::container::BackedEntryContainerNested\">BackedEntryContainerNested</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_memory\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#27-33\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.clear_memory\" class=\"fn\">clear_memory</a>(&amp;mut self)</h4></section></summary><div class=\"docblock\"><p>Move all backing arrays out of memory.</p>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clear_chunk\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#36-41\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.clear_chunk\" class=\"fn\">clear_chunk</a>(&amp;mut self, idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>)</h4></section></summary><div class=\"docblock\"><p>Move the chunk at <code>idx</code> out of memory.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#286-321\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;K::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>&gt;&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.From.html\" title=\"trait core::convert::From\">From</a>&lt;<a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/alloc/vec/struct.Vec.html\" title=\"struct alloc::vec::Vec\">Vec</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>&gt;&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedWrite.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedWrite\">BackedEntryContainerNestedWrite</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Disk\" title=\"type backed_data::array::container::BackedEntryContainerNested::Disk\">Disk</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Coder\" title=\"type backed_data::array::container::BackedEntryContainerNested::Coder\">Coder</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.from_backing\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#301-320\">source</a><h4 class=\"code-header\">pub unsafe fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.from_backing\" class=\"fn\">from_backing</a>&lt;I&gt;(iter: I) -&gt; Self<div class=\"where\">where\n    I: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/collect/trait.IntoIterator.html\" title=\"trait core::iter::traits::collect::IntoIterator\">IntoIterator</a>&lt;Item = (<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>)&gt;,</div></h4></section></summary><div class=\"docblock\"><p>Builds <a href=\"backed_data/array/sync_impl/index.html\" title=\"mod backed_data::array::sync_impl\"><code>self</code></a> from existing backings.</p>\n<h5 id=\"parameters\"><a class=\"doc-anchor\" href=\"#parameters\">§</a>Parameters</h5>\n<ul>\n<li><code>iter</code>: Iterator of (len, backing) pairs.</li>\n</ul>\n<h5 id=\"safety\"><a class=\"doc-anchor\" href=\"#safety\">§</a>Safety</h5>\n<p>Each len argument MUST be correct, otherwise this container is\nincorrectly defined and may crash from an incorrect range address.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#44-65\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html\" title=\"trait backed_data::array::container::BackedEntryContainerNested\">BackedEntryContainerNested</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.loaded_len\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#49-64\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.loaded_len\" class=\"fn\">loaded_len</a>(&amp;self) -&gt; <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a></h4></section></summary><div class=\"docblock\"><p>Returns the number of items currently loaded into memory.</p>\n<p>To get memory usage on constant-sized items, multiply this value by\nthe per-item size.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#67-83\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html\" title=\"trait backed_data::array::container::BackedEntryContainerNested\">BackedEntryContainerNested</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.shrink_to_query\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#69-82\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.shrink_to_query\" class=\"fn\">shrink_to_query</a>(&amp;mut self, idxs: &amp;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>])</h4></section></summary><div class=\"docblock\"><p>Removes all backing stores not needed to hold <code>idxs</code> in memory.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#86-186\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.ResizingContainer.html\" title=\"trait backed_data::array::container::ResizingContainer\">ResizingContainer</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E: <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedWrite.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedWrite\">BackedEntryContainerNestedWrite</a> + <a class=\"trait\" href=\"backed_data/array/container/trait.ResizingContainer.html\" title=\"trait backed_data::array::container::ResizingContainer\">ResizingContainer</a>&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"docblock\"><p>Write implementations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.append\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#122-139\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.append\" class=\"fn\">append</a>&lt;U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Unwrapped\" title=\"type backed_data::array::container::BackedEntryContainerNested::Unwrapped\">Unwrapped</a>&gt;&gt;(\n    &amp;mut self,\n    values: U,\n    backing_store: E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Disk\" title=\"type backed_data::array::container::BackedEntryContainerNested::Disk\">Disk</a>,\n    coder: E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Coder\" title=\"type backed_data::array::container::BackedEntryContainerNested::Coder\">Coder</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedWrite.html#associatedtype.WriteError\" title=\"type backed_data::array::container::BackedEntryContainerNestedWrite::WriteError\">WriteError</a>&gt;</h4></section></summary><div class=\"docblock\"><p>Adds new values by writing them to the backing store.</p>\n<p>Does not keep the values in memory.</p>\n<h5 id=\"example\"><a class=\"doc-anchor\" href=\"#example\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[cfg(feature = <span class=\"string\">\"bincode\"</span>)] </span>{\n<span class=\"kw\">use </span>backed_data::{\n    array::VecBackedArray,\n    entry::{\n        disks::Plainfile,\n        formats::BincodeCoder,\n    }\n};\n<span class=\"kw\">use </span>std::fs::{File, create_dir_all, remove_dir_all, OpenOptions};\n\n<span class=\"kw\">let </span>FILENAME_BASE = std::env::temp_dir().join(<span class=\"string\">\"example_array_append\"</span>);\n<span class=\"kw\">let </span>values = ([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],\n    [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);\n\ncreate_dir_all(FILENAME_BASE.clone()).unwrap();\n<span class=\"kw\">let </span>file_0 = FILENAME_BASE.clone().join(<span class=\"string\">\"_0\"</span>);\n<span class=\"kw\">let </span>file_1 = FILENAME_BASE.join(<span class=\"string\">\"_1\"</span>);\n<span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array: VecBackedArray&lt;u32, Plainfile, <span class=\"kw\">_</span>&gt; = VecBackedArray::default();\narray.append(values.<span class=\"number\">0</span>, file_0.into(), BincodeCoder::default());\narray.append(values.<span class=\"number\">1</span>, file_1.into(), BincodeCoder::default());\n\n<span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>array.get(<span class=\"number\">4</span>).unwrap(), <span class=\"number\">3</span>);\nremove_dir_all(FILENAME_BASE).unwrap();\n}</code></pre></div>\n</div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.append_memory\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/mod.rs.html#169-185\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.append_memory\" class=\"fn\">append_memory</a>&lt;U: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.Into.html\" title=\"trait core::convert::Into\">Into</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Unwrapped\" title=\"type backed_data::array::container::BackedEntryContainerNested::Unwrapped\">Unwrapped</a>&gt;&gt;(\n    &amp;mut self,\n    values: U,\n    backing_store: E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Disk\" title=\"type backed_data::array::container::BackedEntryContainerNested::Disk\">Disk</a>,\n    coder: E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Coder\" title=\"type backed_data::array::container::BackedEntryContainerNested::Coder\">Coder</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;mut Self, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedWrite.html#associatedtype.WriteError\" title=\"type backed_data::array::container::BackedEntryContainerNestedWrite::WriteError\">WriteError</a>&gt;</h4></section></summary><div class=\"docblock\"><p><a href=\"backed_data/array/struct.BackedArray.html#method.append\" title=\"method backed_data::array::BackedArray::append\"><code>Self::append</code></a>, but keeps values in memory.</p>\n<h5 id=\"example-1\"><a class=\"doc-anchor\" href=\"#example-1\">§</a>Example</h5>\n<div class=\"example-wrap\"><pre class=\"rust rust-example-rendered\"><code><span class=\"attr\">#[cfg(feature = <span class=\"string\">\"bincode\"</span>)] </span>{\n    <span class=\"kw\">use </span>backed_data::{\n        array::VecBackedArray,\n        entry::{\n            disks::Plainfile,\n            formats::BincodeCoder,\n        },\n    };\n    <span class=\"kw\">use </span>std::fs::{File, remove_file, OpenOptions};\n\n    <span class=\"kw\">let </span>FILENAME = std::env::temp_dir().join(<span class=\"string\">\"example_array_append_memory\"</span>);\n    <span class=\"kw\">let </span>values = ([<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">1</span>],\n        [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>]);\n\n    <span class=\"kw\">let </span><span class=\"kw-2\">mut </span>array: VecBackedArray&lt;u32, Plainfile, <span class=\"kw\">_</span>&gt; = VecBackedArray::default();\n    array.append_memory(values.<span class=\"number\">0</span>, FILENAME.clone().into(), BincodeCoder::default());\n\n    <span class=\"comment\">// Overwrite file, making disk pointer for first array invalid\n    </span>array.append_memory(values.<span class=\"number\">1</span>, FILENAME.clone().into(), BincodeCoder::default());\n\n    <span class=\"macro\">assert_eq!</span>(<span class=\"kw-2\">*</span>array.get(<span class=\"number\">0</span>).unwrap(), <span class=\"number\">0</span>);\n    remove_file(FILENAME).unwrap();\n}</code></pre></div>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/slice.rs.html#29-54\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedRead\">BackedEntryContainerNestedRead</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Unwrapped\" title=\"type backed_data::array::container::BackedEntryContainerNested::Unwrapped\">Unwrapped</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.InnerData\" title=\"type backed_data::array::container::BackedEntryContainerNested::InnerData\">InnerData</a>]&gt;,</div></h3></section></summary><div class=\"docblock\"><p>Read implementations</p>\n</div><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.get\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/slice.rs.html#44-53\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.get\" class=\"fn\">get</a>(\n    &amp;self,\n    idx: <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>,\n) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.InnerData\" title=\"type backed_data::array::container::BackedEntryContainerNested::InnerData\">InnerData</a>, <a class=\"enum\" href=\"backed_data/array/enum.BackedArrayError.html\" title=\"enum backed_data::array::BackedArrayError\">BackedArrayError</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html#associatedtype.ReadError\" title=\"type backed_data::array::container::BackedEntryContainerNestedRead::ReadError\">ReadError</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Return a value (potentially loading its backing array).</p>\n<p>Backing arrays stay in memory until freed by a mutable function.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/slice.rs.html#317-326\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedRead\">BackedEntryContainerNestedRead</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Unwrapped\" title=\"type backed_data::array::container::BackedEntryContainerNested::Unwrapped\">Unwrapped</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.InnerData\" title=\"type backed_data::array::container::BackedEntryContainerNested::InnerData\">InnerData</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/slice.rs.html#323-325\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.iter\" class=\"fn\">iter</a>(&amp;self) -&gt; <a class=\"struct\" href=\"backed_data/array/sync_impl/slice/struct.BackedArrayIter.html\" title=\"struct backed_data::array::sync_impl::slice::BackedArrayIter\">BackedArrayIter</a>&lt;'_, K, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayIter&lt;&#39;_, K, E&gt;\">ⓘ</a></h4></section></summary><div class=\"docblock\"><p>Iterates over each backed item.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/slice.rs.html#328-339\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedRead\">BackedEntryContainerNestedRead</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunk_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/slice.rs.html#336-338\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.chunk_iter\" class=\"fn\">chunk_iter</a>(\n    &amp;self,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;&amp;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Unwrapped\" title=\"type backed_data::array::container::BackedEntryContainerNested::Unwrapped\">Unwrapped</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html#associatedtype.ReadError\" title=\"type backed_data::array::container::BackedEntryContainerNestedRead::ReadError\">ReadError</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Returns underlying chunks in order.</p>\n<p>This will load each chunk before providing it.\nAll chunks loaded earlier in the iteration will remain loaded.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/slice.rs.html#342-358\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsRef.html\" title=\"trait core::convert::AsRef\">AsRef</a>&lt;[<a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;,\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedAll.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedAll\">BackedEntryContainerNestedAll</a>,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Unwrapped\" title=\"type backed_data::array::container::BackedEntryContainerNested::Unwrapped\">Unwrapped</a>: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.InnerData\" title=\"type backed_data::array::container::BackedEntryContainerNested::InnerData\">InnerData</a>]&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.iter_mut\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/slice.rs.html#351-357\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.iter_mut\" class=\"fn\">iter_mut</a>&lt;'a&gt;(&amp;'a mut self) -&gt; <a class=\"struct\" href=\"backed_data/array/sync_impl/slice/struct.BackedArrayIterMut.html\" title=\"struct backed_data::array::sync_impl::slice::BackedArrayIterMut\">BackedArrayIterMut</a>&lt;'a, E&gt; <a href=\"#\" class=\"tooltip\" data-notable-ty=\"BackedArrayIterMut&lt;&#39;a, E&gt;\">ⓘ</a><div class=\"where\">where\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Unwrapped\" title=\"type backed_data::array::container::BackedEntryContainerNested::Unwrapped\">Unwrapped</a>: 'a,\n    E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html#associatedtype.ReadError\" title=\"type backed_data::array::container::BackedEntryContainerNestedRead::ReadError\">ReadError</a>: 'a,</div></h4></section><span class=\"item-info\"><div class=\"stab portability\">Available on <strong>crate feature <code>unsafe_array</code></strong> only.</div></span></summary><div class=\"docblock\"><p>Returns <a href=\"backed_data/array/sync_impl/slice/struct.BackedArrayIterMut.html\" title=\"struct backed_data::array::sync_impl::slice::BackedArrayIterMut\"><code>BackedArrayIterMut</code></a>, which automatically tracks and forces\nflushes when mutated values are dropped. Both the iterator and its\nhandles also provide manually callable flush methods.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/slice.rs.html#360-380\">source</a><a href=\"#impl-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"backed_data/array/container/trait.Container.html\" title=\"trait backed_data::array::container::Container\">Container</a>&lt;Data = <a class=\"primitive\" href=\"https://doc.rust-lang.org/nightly/std/primitive.usize.html\">usize</a>&gt;, E&gt; <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/convert/trait.AsMut.html\" title=\"trait core::convert::AsMut\">AsMut</a>&lt;[E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.Container.html#associatedtype.Data\" title=\"type backed_data::array::container::Container::Data\">Data</a>]&gt; + <a class=\"trait\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedAll.html\" title=\"trait backed_data::array::container::BackedEntryContainerNestedAll\">BackedEntryContainerNestedAll</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.chunk_mut_iter\" class=\"method\"><a class=\"src rightside\" href=\"src/backed_data/array/sync_impl/slice.rs.html#367-379\">source</a><h4 class=\"code-header\">pub fn <a href=\"backed_data/array/struct.BackedArray.html#tymethod.chunk_mut_iter\" class=\"fn\">chunk_mut_iter</a>(\n    &amp;mut self,\n) -&gt; impl <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/iter/traits/iterator/trait.Iterator.html\" title=\"trait core::iter::traits::iterator::Iterator\">Iterator</a>&lt;Item = <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;<a class=\"struct\" href=\"backed_data/entry/sync_impl/struct.BackedEntryMut.html\" title=\"struct backed_data::entry::sync_impl::BackedEntryMut\">BackedEntryMut</a>&lt;'_, <a class=\"struct\" href=\"backed_data/entry/struct.BackedEntry.html\" title=\"struct backed_data::entry::BackedEntry\">BackedEntry</a>&lt;E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.OnceWrapper\" title=\"type backed_data::array::container::BackedEntryContainerNested::OnceWrapper\">OnceWrapper</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Disk\" title=\"type backed_data::array::container::BackedEntryContainerNested::Disk\">Disk</a>, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNested.html#associatedtype.Coder\" title=\"type backed_data::array::container::BackedEntryContainerNested::Coder\">Coder</a>&gt;&gt;, E::<a class=\"associatedtype\" href=\"backed_data/array/container/trait.BackedEntryContainerNestedRead.html#associatedtype.ReadError\" title=\"type backed_data::array::container::BackedEntryContainerNestedRead::ReadError\">ReadError</a>&gt;&gt;</h4></section></summary><div class=\"docblock\"><p>Provides mutable handles to underlying chunks, using <a href=\"backed_data/entry/sync_impl/struct.BackedEntryMut.html\" title=\"struct backed_data::entry::sync_impl::BackedEntryMut\"><code>BackedEntryMut</code></a>.</p>\n<p>See <a href=\"backed_data/array/struct.BackedArray.html#method.chunk_iter\" title=\"method backed_data::array::BackedArray::chunk_iter\"><code>Self::chunk_iter</code></a> for the immutable iterator.</p>\n</div></details></div></details>",0,"backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Clone-for-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#67-75\">source</a><a href=\"#impl-Clone-for-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>, E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html\" title=\"trait core::clone::Clone\">Clone</a> for <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#68-74\">source</a><a href=\"#method.clone\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\" class=\"fn\">clone</a>(&amp;self) -&gt; Self</h4></section></summary><div class='docblock'>Returns a copy of the value. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#tymethod.clone\">Read more</a></div></details><details class=\"toggle method-toggle\" open><summary><section id=\"method.clone_from\" class=\"method trait-impl\"><span class=\"rightside\"><span class=\"since\" title=\"Stable since Rust version 1.0.0\">1.0.0</span> · <a class=\"src\" href=\"https://doc.rust-lang.org/nightly/src/core/clone.rs.html#175\">source</a></span><a href=\"#method.clone_from\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\" class=\"fn\">clone_from</a>(&amp;mut self, source: &amp;Self)</h4></section></summary><div class='docblock'>Performs copy-assignment from <code>source</code>. <a href=\"https://doc.rust-lang.org/nightly/core/clone/trait.Clone.html#method.clone_from\">Read more</a></div></details></div></details>","Clone","backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Debug-for-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#52\">source</a><a href=\"#impl-Debug-for-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>, E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html\" title=\"trait core::fmt::Debug\">Debug</a> for <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.fmt\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#52\">source</a><a href=\"#method.fmt\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\" class=\"fn\">fmt</a>(&amp;self, f: &amp;mut <a class=\"struct\" href=\"https://doc.rust-lang.org/nightly/core/fmt/struct.Formatter.html\" title=\"struct core::fmt::Formatter\">Formatter</a>&lt;'_&gt;) -&gt; <a class=\"type\" href=\"https://doc.rust-lang.org/nightly/core/fmt/type.Result.html\" title=\"type core::fmt::Result\">Result</a></h4></section></summary><div class='docblock'>Formats the value using the given formatter. <a href=\"https://doc.rust-lang.org/nightly/core/fmt/trait.Debug.html#tymethod.fmt\">Read more</a></div></details></div></details>","Debug","backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Default-for-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#77-85\">source</a><a href=\"#impl-Default-for-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>, E: <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a>&gt; <a class=\"trait\" href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html\" title=\"trait core::default::Default\">Default</a> for <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;</h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.default\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#78-84\">source</a><a href=\"#method.default\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\" class=\"fn\">default</a>() -&gt; Self</h4></section></summary><div class='docblock'>Returns the “default value” for a type. <a href=\"https://doc.rust-lang.org/nightly/core/default/trait.Default.html#tymethod.default\">Read more</a></div></details></div></details>","Default","backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Deserialize%3C'de%3E-for-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#52\">source</a><a href=\"#impl-Deserialize%3C'de%3E-for-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;'de, K, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.208/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt; for <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.208/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.208/serde/de/trait.Deserialize.html\" title=\"trait serde::de::Deserialize\">Deserialize</a>&lt;'de&gt;,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.deserialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#52\">source</a><a href=\"#method.deserialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.208/serde/de/trait.Deserialize.html#tymethod.deserialize\" class=\"fn\">deserialize</a>&lt;__D&gt;(__deserializer: __D) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;Self, __D::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.208/serde/de/trait.Deserializer.html#associatedtype.Error\" title=\"type serde::de::Deserializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __D: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.208/serde/de/trait.Deserializer.html\" title=\"trait serde::de::Deserializer\">Deserializer</a>&lt;'de&gt;,</div></h4></section></summary><div class='docblock'>Deserialize this value from the given Serde deserializer. <a href=\"https://docs.rs/serde/1.0.208/serde/de/trait.Deserialize.html#tymethod.deserialize\">Read more</a></div></details></div></details>","Deserialize<'de>","backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"],["<details class=\"toggle implementors-toggle\" open><summary><section id=\"impl-Serialize-for-BackedArray%3CK,+E%3E\" class=\"impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#52\">source</a><a href=\"#impl-Serialize-for-BackedArray%3CK,+E%3E\" class=\"anchor\">§</a><h3 class=\"code-header\">impl&lt;K, E&gt; <a class=\"trait\" href=\"https://docs.rs/serde/1.0.208/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a> for <a class=\"struct\" href=\"backed_data/array/struct.BackedArray.html\" title=\"struct backed_data::array::BackedArray\">BackedArray</a>&lt;K, E&gt;<div class=\"where\">where\n    K: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.208/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,\n    E: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.208/serde/ser/trait.Serialize.html\" title=\"trait serde::ser::Serialize\">Serialize</a>,</div></h3></section></summary><div class=\"impl-items\"><details class=\"toggle method-toggle\" open><summary><section id=\"method.serialize\" class=\"method trait-impl\"><a class=\"src rightside\" href=\"src/backed_data/array/mod.rs.html#52\">source</a><a href=\"#method.serialize\" class=\"anchor\">§</a><h4 class=\"code-header\">fn <a href=\"https://docs.rs/serde/1.0.208/serde/ser/trait.Serialize.html#tymethod.serialize\" class=\"fn\">serialize</a>&lt;__S&gt;(&amp;self, __serializer: __S) -&gt; <a class=\"enum\" href=\"https://doc.rust-lang.org/nightly/core/result/enum.Result.html\" title=\"enum core::result::Result\">Result</a>&lt;__S::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.208/serde/ser/trait.Serializer.html#associatedtype.Ok\" title=\"type serde::ser::Serializer::Ok\">Ok</a>, __S::<a class=\"associatedtype\" href=\"https://docs.rs/serde/1.0.208/serde/ser/trait.Serializer.html#associatedtype.Error\" title=\"type serde::ser::Serializer::Error\">Error</a>&gt;<div class=\"where\">where\n    __S: <a class=\"trait\" href=\"https://docs.rs/serde/1.0.208/serde/ser/trait.Serializer.html\" title=\"trait serde::ser::Serializer\">Serializer</a>,</div></h4></section></summary><div class='docblock'>Serialize this value into the given Serde serializer. <a href=\"https://docs.rs/serde/1.0.208/serde/ser/trait.Serialize.html#tymethod.serialize\">Read more</a></div></details></div></details>","Serialize","backed_data::array::async_impl::AsyncVecBackedArray","backed_data::array::container::encrypted::SecretBackedArray","backed_data::array::VecBackedArray"]]
};if (window.register_type_impls) {window.register_type_impls(type_impls);} else {window.pending_type_impls = type_impls;}})()