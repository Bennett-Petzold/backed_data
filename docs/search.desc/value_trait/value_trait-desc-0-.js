searchState.loadedDescShard("value_trait", 0, "A crate providing generalised value traits for working with\nAn access error for <code>ValueType</code>\nan array\nA boolean value\na boolean\nA single utf-8 character\na custom type\nExtended types that do not have a real representation in …\nExtended types that have no native representation in JSON\nA 32 bit floating point value\nA floating point value\na float type\na 128 bit signed integer\nA 16 bit signed integer value\nA 32 bit signed integer value\nA signed 64 bit integer.\na signed integer type\nA 8 bit signed integer value\nNot a value at all\nAn access attempt to a Value was made under the assumption …\nAn access attempt to a Value was made under the assumption …\nThe null value\nnull\nan object\nStatic tape node\na string type\nA type error thrown by the <code>try_*</code> functions\na 128 bit unsigned integer\nA 16 bit unsigned integer value\nA 32 bit unsigned integer value\nAn unsigned 64 bit integer.\na unsigned integer type\nA 8 bit unsigned integer value\nA useize value\nSupport of builder methods for traits.\nTypes of JSON values\nReturns an empty array\nReturns an empty array with a given capacity\nTraits that provide basic interactions, they do have no …\nTraits that have derived implementations relying on <code>base</code> …\nThe expected value type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTraits for serializing JSON\nThe actual value type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns anull value\nReturns an empty object\nReturns an empty object with a given capacity\nPrelude for traits\nThe array structure\nThe type for Arrays\nThe type for Arrays\nThe object structure\nThe type for Objects\nThe type for Objects\nThe type for Strings\nType checks for custom values on a value\nType information on a value\nTrait to allow accessing data inside a Value\nMutatability for container values\nAccess to scalar value types\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA Value that can be serialized and written\nTries to represent the value as an array and returns a …\nTries to represent the value as an array and returns a …\nTries to represent the value as a bool\nTries to represent the value as a Char\nTries to represent the value as a f32\nTries to represent the value as a f64\nTries to represent the value as an i128\nTries to represent the value as an i16\nTries to represent the value as an i32\nTries to represent the value as an i64\nTries to represent the value as an i8\nTries to represent the value as a ‘null’;\nTries to represent the value as an object and returns a …\nTries to represent the value as an object and returns a …\nTries to represent the value as a &amp;str\nTries to represent the value as an u128\nTries to represent the value as an u16\nTries to represent the value as an u32\nTries to represent the value as an u64\nTries to represent the value as an u8\nTries to represent the value as an usize\nCasts the current value to a f64 if possible, this will …\nEncodes the value into it’s JSON representation as a …\nEncodes the value into it’s JSON representation as a …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nTries to turn the value into it’s string representation\nreturns if a type is a custom type\nGets the type of the current value\nEncodes the value into it’s JSON representation into a …\nEncodes the value into it’s JSON representation into a …\nThe array structure\nThe array structure\nThe array structure\nThe type for Arrays\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Object Keys\nThe type for Objects\nMutatability for array like values\nMutatability for object like values\nThe object structure\nThe object structure\nThe object structure\nThe type for Objects\nThe type for Objects\nThe type for Strings\nThe target for nested lookups\nThe target for nested lookups\nThe target for nested lookups\nThe target for nested lookups\nThe type for Object Values\nThe target for nested lookups\nThe type for Array Values\nThe target for nested lookups\nType checks for container values on a value\nType checks for scalar values on a value\nAccess to a value as an array\nAccess to a value as an array with error handling\nAccess to a value as an object\nAccess to container values in an object\nAccess to scalar values in an object\n<code>try_as_*</code> access to container values in an object\n<code>try_as_*</code> access to scalar values in an object\n<code>try_as_*</code> access to a value as an object\n<code>try_as_*</code> access to container value types\n<code>try_as_*</code> access to scalar value types\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA trait that allows destructively turning a value into it…\nChecks if a Value contains a given key. This will return …\nGets a ref to a value based on a key, returns <code>None</code> if the …\nTries to get an element of an object as a array\nTries to get an element of an object as a bool\nTries to get an element of an object as a f32\nTries to get an element of an object as a f64\nTries to get an element of an object as a i128\nTries to get an element of an object as a i16\nTries to get an element of an object as a i32\nTries to get an element of an object as a i64\nTries to get an element of an object as a i8\nGets a ref to a value based on n index, returns <code>None</code> if the\nSame as <code>get_idx</code> but returns a mutable ref instead\nSame as <code>get</code> but returns a mutable ref instead\nTries to get an element of an object as a object\nTries to get an element of an object as a str\nTries to get an element of an object as a u128\nTries to get an element of an object as a u16\nTries to get an element of an object as a u32\nTries to get an element of an object as a u64\nTries to get an element of an object as a u8\nTries to get an element of an object as a usize\nInsert into this <code>Value</code> as an <code>Object</code>. Will return an …\nreturns true if the current value can be represented as an …\nreturns true if the current value a bool\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be cast into a f64\nreturns true if the current value a floatingpoint number\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value a integer number\nreturns true if the current value is null\nreturns true if the current value a number either float or …\nreturns true if the current value can be represented as an …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nPops from this <code>Value</code> as an <code>Array</code>. Will return an …\nPushes to this <code>Value</code> as an <code>Array</code>. Will return an …\nRemove from this <code>Value</code> as an <code>Object</code>. Will return an …\nTries to represent the value as an array and returns a …\nTries to represent the value as a bool\nTries to represent the value as a Char\nTries to represent the value as a f32\nTries to represent the value as a f64\nTries to represent the value as a i128\nTries to represent the value as an i16\nTries to represent the value as an i32\nTries to represent the value as an i64\nTries to represent the value as an i8\nTries to represent the value as an object and returns a …\nTries to represent the value as a &amp;str\nTries to represent the value as an u128\nTries to represent the value as an u16\nTries to represent the value as an u32\nTries to represent the value as an u64\nTries to represent the value as an u8\nTries to represent the value as an usize\nTries to Casts the current value to a f64 if possible, …\nTries to get a value based on a key, returns a <code>TryTypeError</code>…\nTries to get an element of an object as an array, returns …\nTries to get an element of an object as a bool, returns an …\nTries to get an element of an object as a f32, returns an …\nTries to get an element of an object as a f64, returns an …\nTries to get an element of an object as a i128, returns an …\nTries to get an element of an object as a i16, returns an …\nTries to get an element of an object as a i32, returns an …\nTries to get an element of an object as a i64, returns an …\nTries to get an element of an object as a i8, returns an …\nTries to get a value based on n index, returns a type …\nTries to get an element of an object as an object, returns …\nTries to get an element of an object as a str, returns an …\nTries to get an element of an object as a u128, returns an …\nTries to get an element of an object as a u16, returns an …\nTries to get an element of an object as a u32, returns an …\nTries to get an element of an object as a u64, returns an …\nTries to get an element of an object as a u8, returns an …\nTries to get an element of an object as a usize, returns …\nTries to insert into this <code>Value</code> as an <code>Object</code>. If the <code>Value</code> …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nTries to turn the value into it’s string representation\nTries to pop from a <code>Value</code> as an <code>Array</code>. if the <code>Value</code> is any …\nTries to push to a <code>Value</code> if as an <code>Array</code>. This function …\nTries to remove from this <code>Value</code> as an <code>Object</code>. If the <code>Value</code> …\nBase generator trait\nSimple dump Generator\nPretty Generator\nPretty Writer Generator\nThe writer\nWriter Generator\nReturns the data as a String\nReturns the data as a String\ndedents one step\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the writer\nindents one step\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new generator\nCreates a new pretty printing generator\nCreates a new generator\nCreates a new generator\nwrites new line\nWrite a slice\nWrite a char\nwrites a float value\nwrites an integer value\nwrite with minimum\nwrites a simple string content  (usually short and non …\nwrites a simple string (usually short and non escaped) …\nSafety\nwrites a string\nwrites a string\nMutability functions for a value array\nA trait for the minimal common functionality of a vale …\nElements of the array\nElements of the array\nThe values in the object\nThe values in the object\nThe key in the objects\nThe key in the objects\nA mutable value Object\nA trait for the minimal common functionality of a vale …\nGets a ref to a value based on n index, returns <code>None</code> if the\nGets a ref to a value based on a key, returns <code>None</code> if the …\nGets a ref to a value based on n index, returns <code>None</code> if the\nGets the value of a key as a mutable reference.\nInserts a value\nReturns if the array is empty\nReturns if the array is empty\nReturns if the array is empty\nReturns if the array is empty\nIterates over the values paris\nIterates over the key value paris\nIterates over the keys\nNumber of key/value pairs\nNumber of key/value pairs\nReturns the last element of the array or <code>None</code>\nAppends e to the end of the <code>Array</code>\nRemoves a value from the object\nIterates over the values")