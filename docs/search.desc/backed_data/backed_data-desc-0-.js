searchState.loadedDescShard("backed_data", 0, "Cache data outside memory, loading in when referenced.\nDefines <code>BackedArray</code> and the <code>Container</code>/<code>ResizingContainer</code> …\nCreates a default <code>CursorVec</code> for testing.\nDefines <code>DirectoryBackedArray</code>.\nDefines <code>BackedEntry</code>, the core of this library.\nExample usage re-exports.\nAdditional description of the library.\nDefines tools used for ONLY testing.\nBackbone traits and structs for the library implementation.\nArray stored as multiple arrays on disk.\nA single entry pair in <code>BackedArray</code>.\nAdds new values by writing them to the backing store.\n<code>Self::append</code>, but keeps values in memory.\nAsync version of <code>Self::from_containers</code>.\nAsync version of <code>Self::generic_get</code>.\nAsync version of <code>Self::get</code>.\nAdds new values by writing them to the backing store.\n<code>Self::append</code>, but keeps values in memory.\nReturns underlying chunks in order.\nProvides mutable handles to underlying chunks, using …\nFuture iterator over each chunk.\nNumber of underlying chunks.\nMove the chunk at <code>idx</code> out of memory.\nMove all backing arrays out of memory.\nDefines generic container types.\nGet field <code>entries</code> from instance of <code>BackedArray</code>.\nGet field <code>entry</code> from instance of <code>BackedArrayEntry</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nBuilds <code>self</code> from existing backings.\nBuilds <code>self</code> from an iterator of containers, keeping them …\n<code>Self::chunk_iter</code> that works on containers that don’t …\n<code>Self::chunk_mut_iter</code> that works on containers that don’t …\nFuture iterator over each chunk.\n<code>Self::get</code> that works on containers that don’t directly …\n<code>Self::iter</code> that works on containers that don’t directly …\n<code>Self::iter_mut</code> that works on containers that don’t …\nFuture iterator over each backed item.\nVersion of <code>Self::stream</code> with <code>Send</code> bounds.\nReturn a value (potentially loading its backing array).\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over each backed item.\nReturns <code>BackedArrayIterMut</code>, which automatically tracks and …\nGet field <code>key_ends</code> from instance of <code>BackedArray</code>.\nGet field <code>key_starts</code> from instance of <code>BackedArray</code>.\nTotal size of stored data.\nReturns the number of items currently loaded into memory.\nMove entries in <code>rhs</code> to <code>self</code>.\nGet field <code>range</code> from instance of <code>BackedArrayEntry</code>.\nAccess to the underlying chunks, without loading data.\nRemoves an entry with the internal index, shifting ranges.\nRemoves all backing stores not needed to hold <code>idxs</code> in …\nFuture iterator over each backed item.\nVersion of <code>Self::stream</code> with <code>+ Send</code> bounds.\nA <code>BackedEntryContainer</code> inside a <code>Container</code>.\nFor internal use, reduces size of generics boilerplate.\n<code>BackedEntryContainerNested</code> variant.\nFor internal use, reduces size of generics boilerplate.\nIterates over a backed array, returning each item future …\n<code>BackedArrayFutIterGeneric</code>, but returns are <code>Send</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nIterates over a backed array, returning each item future …\n<code>BackedArrayFutIter</code>, but returns are <code>Send</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA <code>BackedEntry</code> holding a valid <code>Container</code> type.\nA <code>BackedEntryContainer</code> inside a <code>Container</code>.\n<code>BackedEntryContainerNested</code> variant that has writing and …\n<code>BackedEntryContainerNested</code> variant that has reading.\n<code>BackedEntryContainerNested</code> variant that has writing.\nGeneric wrapper for any container type.\nThe data container entries give references to.\nA <code>Container</code> that supports resizing operations.\nWraps <code>T</code> in <code>SecretVecWrapper</code> and wraps <code>Disk</code> in <code>Encrypted</code>.\nRequires <code>stable_deref_trait::StableDeref</code> when <code>unsafe</code> code …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nHandle to a backed value that flushes on drop.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nIterates over a backed array, returning each item in order.\nIterates over a backed array, returning each item in order.\nFlush all opened handles.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSpecialization of <code>BackedArrayIter</code> for slices.\nIterates over a backed array, returning each item in order.\nFlush all opened handles.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>BackedArray</code> wrapper for automatically creating new entries …\nAsync version of <code>Self::load</code>.\nMoves the directory to a new location wholesale.\nCreates a new directory at <code>directory_root</code>.\nAsync version of <code>Self::save</code>.\nAppend an existing BackedArray.\nAppend another <code>self</code> of the same type.\nSplits this into parts, for functions that need …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoad <code>self</code> from <code>DIRECTORY_ROOT/meta.dat</code>.\nMoves the directory to a new location wholesale.\nCreates a new directory at <code>directory_root</code>.\nSave <code>self</code> at <code>DIRECTORY_ROOT/meta.dat</code>.\nUpdates the root of the directory backed array.\nEntry kept on some backing storage, loaded into memory on …\nThread-unsafe typedef of <code>BackedEntry</code> for arrays.\nThread-safe typedef of <code>BackedEntry</code> for arrays.\nAsync specialization of <code>BackedEntry</code>.\nThread-unsafe typedef of <code>BackedEntry</code> for non-pointer types.\nThread-safe typedef of <code>BackedEntry</code> for non-pointer types.\nThread unsafe <code>BackedEntry</code> with inner value <code>T</code>.\nThread safe <code>BackedEntry</code> with inner value <code>T</code>.\nWrapper to minimize bounds specification for <code>BackedEntry</code>.\nSee <code>Self::change_backing</code>.\nSee <code>Self::change_backing</code>.\nSee <code>Self::load</code>.\nSee <code>Self::load</code>.\nConvenience wrapper for <code>BackedEntryAsyncMut::mut_handle</code>\nConvenience wrapper for <code>BackedEntryAsyncMut::mut_handle</code>\nSee <code>Self::update</code>.\nSee <code>Self::update</code>.\nSee <code>Self::write</code>.\nSee <code>Self::write</code>.\n<code>Self::write_unload</code>.\n<code>Self::write_unload</code>.\nDefines adapters that allow synchronous <code>disks</code> and/or …\nConverts <code>self</code> to another disk and encoding representation.\nDefines the underlying storage for <code>BackedEntry</code>.\nReplaces <code>self</code>’s encoder without any disk operation.\nReplaces <code>self</code>’s encoder without any disk operation.\nDefines the encoding/decoding formats for backed disks.\nReturns the argument unchanged.\nConverts from a synchronous backing into <code>self</code>.\nConverts from a synchronous backing into <code>self</code>.\nCalls <code>U::from(self)</code>.\nReturns the entry, loading from disk if not in memory.\nConvenience wrapper for <code>BackedEntryMut::mut_handle</code>\nSee <code>Self::with_disk</code> when <code>Coder</code> implements default.\nTakes the inner value, loading from disk if not in memory.\nConverts <code>self</code> into a synchronous backing.\nConverts <code>self</code> into a synchronous backing.\nUpdates underlying storage with the current entry\n<code>Self::new</code>, but builds <code>Coder</code> from default.\nWrites the new value to memory and disk.\nWrite the value to disk only, unloading current memory.\n<code>BlockingFn</code> that runs a synchronous decoder.\n<code>BlockingFn</code> that runs a synchronous encoder into a write …\nAdapts a synchronous disk to be asynchronous.\nRuns a sync <code>Read</code> on a background thread for nonblocking …\n<code>BlockingFn</code> that spawns a background reader.\n<code>BlockingFn</code> that spawns a background writer.\nAdapts a synchronous coder (with synchronous disks) to be …\nAdapts a synchronous coder and asynchronous disk to be …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConstructs a new async adapter for some <code>ReadDisk</code>.\nGives mutable handle to a backed entry.\n<code>BackedEntryTrait</code> that can be read asynchronously.\n<code>BackedEntryTrait</code> that can be asynchronously written to.\n<code>BlockingFn</code> that calls load on a <code>BackedEntry</code>.\n<code>BlockingFn</code> that calls update on a <code>BackedEntry</code>.\n<code>DerefMut::deref_mut</code> that sets a modified flag.\n<code>Drop::drop</code> panics if the handle is dropped while modified. …\nSaves modifications to disk, unsetting the modified flag …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns true if the memory version is desynced from the …\nReturns <code>BackedEntryAsyncMut</code> to allow efficient in-memory …\nProduces storage that can be read from asynchronously.\nProduces storage that can be written to asynchronously.\nRepresents some inbound network request.\nA regular file entry.\nProduces storage that can be read from synchronously.\n<code>Plainfile</code>, but with no buffering at all.\nProduces storage that can be written to synchronously.\n<code>Plainfile</code>, but with no write buffering.\nConvenience <code>Disk</code> define structs.\nClones out a new client from an internal static pool.\nDefines memory protected storage that encrypts to disk.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDefines the <code>Mmap</code> type to wrap <code>mmap</code>.\nConstructs a new <code>Network</code> to represent some inbound network …\nZSTD encryption and decryption.\nCombines <code>CustomAsyncRead</code> and <code>CustomAsyncWrite</code> to form one …\nConvenience struct to define a custom <code>AsyncReadDisk</code>, from …\nConvenience struct to define a custom <code>AsyncWriteDisk</code>, from …\nCombines <code>CustomSync</code> and <code>CustomAsync</code> to capture all …\nConvenience struct to define a custom <code>ReadDisk</code>, from a …\nCombines <code>CustomRead</code> and <code>CustomWrite</code> to form one full I/O …\nConvenience struct to define a custom <code>WriteDisk</code>, from a …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAsync wrapper of <code>Encrypted</code>, which derefs to the sync …\n<code>BlockingFn</code> that runs AES decryption.\n<code>BlockingFn</code> that runs AES encryption.\nA resource encrypted with Aes256Gcm on some underlying <code>disk</code>…\nA SecretVec implementing <code>Buffer</code>.\nWraps <code>secrets::SecretVec</code>.\nVery inefficient push approach!\nVery inefficient remove approach!\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreate a new <code>Encrypted</code>.\nTo avoid explicit typing every time with <code>Self::new</code> and <code>None</code>…\nPreviously failed irrecoverably, so no mmap in memory.\nAn mmaped file entry.\nWraps a mutable mmap,\nRead-only <code>memmap2::Mmap</code> that handles zero-length on …\nGuards an inner mmap to match Rust mutability requirements.\nAdding <code>Send</code> and <code>Sync</code> to <code>UnsafeCell</code> on <code>MmapWriter</code>.\nThis is always issued so that the MmapWriter access is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUses ZSTD to encode/decode to an underlying <code>disk</code>.\nZstd compression level (…\nConstruct in a constant context. If this fails, <code>value</code> is …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA format decoder that can be used asynchronously.\nA format encoder that can be used asynchronously.\nA format decoder that can be used synchronously.\nA format encoder that can be used synchronously.\nReturn data with a known format from storage.\nReturn data with a known format from storage.\nFully write out formatted data to a target disk.\nFully write out formatted data to a target disk.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnified <code>csv_async::AsyncReaderBuilder</code> and …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUnified <code>csv::ReaderBuilder</code> and <code>csv::WriterBuilder</code> …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGives mutable handle to a backed entry.\n<code>BackedEntryTrait</code> that can be read.\n<code>BackedEntryTrait</code> that can be written to.\n<code>DerefMut::deref_mut</code> that sets a modified flag.\n<code>Drop::drop</code> that attempts a write if modified, and panics …\nSaves modifications to disk, unsetting the modified flag …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns true if the memory version is desynced from the …\nReturns <code>BackedEntryMut</code> to allow efficient in-memory …\n<code>backed_data</code> provides a way to store large data, but it is …\nDependencies are broken down by feature category, then …\nFeatures are broken into four category headers. The …\nUnsafe code information.\nUnsafe storage disk that allows for memory peeking during …\nCreates a default <code>CursorVec</code> for testing.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCombined trait for types with both <code>AsRef</code> and <code>AsMut</code>.\n<code>std::io::Cursor</code> wrapper that provides async methods.\nTakes ownership of a parent value and computes the child …\nPointer wrapper that is Send/Sync if it wraps a Send/Sync …\nWrapper that allows &amp;mut T to implement <code>AsMut&lt;T&gt;</code> and …\nWrapper that allows &amp;T to implement <code>AsRef&lt;T&gt;</code>.\nUnity trait for <code>OnceCell</code> and <code>OnceLock</code>.\nTrait to combine Mutex (allowing panics) and UnsafeCell in …\nNonNull wrapper that is Send/Sync if it wraps a Send/Sync …\nWrapper that allows &amp;mut T to implement <code>AsMut&lt;T&gt;</code> and …\nWrapper that allows &amp;T to implement <code>AsRef&lt;T&gt;</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRegular mutable reference return.\nMutable reference return from an immutable context.\nImmutable reference return.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWorkaround for lack of stable <code>FnOnce</code> implementation.\nExecutes in the current thread.\nExecutes on a spawned tokio thread.\nPartial alternative implementation of <code>tokio::sync::OnceCell</code>…\nInternal implementing <code>Future</code> for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.")