searchState.loadedDescShard("simd_json", 0, "simd-json is a rust port of the simdjson c++ library. It …\nAVX2 implementation\nan array\nThe key of a map isn’t a string\nA boolean value\na boolean\nA struct to hold the buffers for the parser.\na custom type\nDeserializer struct to deserialize a JSON\nEarly End Of File\nContains the error value\nParser error\nError types encountered while parsing\nExpected an array\nExpected a <code>,</code> in an array\nExpected Array elements\nexpected an boolean\nExpected an enum\nExpected a false\nExpected a float\nExpected an integer\nExpected a map\nExpected a <code>,</code> in an object\nExpected the object to end\nExpected a null\nExpected a number\nExpected an <code>:</code> to separate key and value in an object\nExpected Object elements\nExpected Object Key\nExpected a signed number\nExpected a string\nExpected a true\nExpected an unsigned number\nExtended types that do not have a real representation in …\nA floating point value\na float type\na 128 bit signed integer\nA signed 64 bit integer.\na signed integer type\nSupported implementations\nSimd-json only supports inputs of up to 4GB in size.\nInternal error\nInvalid escape sequence\nInvalid exponent in a floating point number\nInvalid number\nInvalid Unicode codepoint\nInvalid Unicode escape sequence\nInvalid UTF8 codepoint\nIO error\nObject Key isn’t a string\nARM NEON implementation\nRust native implementation\nNon structural character\nThe null value\nnull\nan object\nContains the success value\nOverflow of a limited buffer\nParser Error\nsimd-json Result type\nWEBASM SIMD128 implementation\nIt’s 64 for all (Is this correct?)\nThe maximum padding size required by any SIMD …\nSSE4.2 implementation\nGeneric serde error\nNo SIMD support detected during runtime\nStatic tape node\nRust native implementation with using std::simd\na string type\nGeneric syntax error\nTrailing data\na 128 bit unsigned integer\nAn unsigned 64 bit integer.\na unsigned integer type\nA specific type was expected but another one encountered.\nUnexpected character\nUnterminated string\nTypes of JSON values\nreturns the algorithm / architecture used by the …\nReturns the current character the error occurred at.\nReexport of Cow Reexport of Cow\nReturns the type of error that occurred.\nFills a already existing tape from the input for later …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a serializer from a mutable slice of bytes\nCreates a serializer from a mutable slice of bytes using a …\nCreate a generic error\nReturns the byte index the error occurred at.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nExtracts the tape from the Deserializer\nTaken from: …\nAdapted from: …\npossible compiler hint that a branch is likely\nCreate new buffer for input length. If this is too small a …\nSame as <code>next()</code> but we pull out the check so we don’t …\nDefault trait imports;\nserde related helper functions\nstatic cast to an i64\nstatic cast to an i32\nstatic cast to an i64\nstatic cast to an i8\nstatic cast to an u32\nstatic cast to an u64\nFROM serde-json We only use our own error type; no need …\nCreates a tape from the input for later consumption\nCreates a tape from the input for later consumption\npossible compiler hint that a branch is unlikely\nsimd-json JSON-DOM value\nBorrowed data.\nA clone-on-write smart pointer.\nOwned data.\nCreates an owned Cow&lt;’a, B&gt; with the default value for …\nConverts a <code>CStr</code> into a borrowed <code>Cow</code> without copying or …\nCreates an <code>Owned</code> variant of <code>Cow</code> from an owned instance of …\nMoves the string into a <code>Cow::Owned</code>.\nConverts a <code>CString</code> into an owned <code>Cow</code> without copying or …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nCreates a clone-on-write pointer from a reference to <code>Path</code>.\nConverts a string slice into a <code>Borrowed</code> variant. No heap …\nConverts the string reference into a <code>Cow::Borrowed</code>.\nCreates a clone-on-write pointer from an owned instance of …\nCreates a clone-on-write pointer from a reference to …\nConverts a <code>String</code> into an <code>Owned</code> variant. No heap …\nConverts a <code>String</code> reference into a <code>Borrowed</code> variant. No …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a slice.\nReturns the argument unchanged.\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to an …\nCreates a <code>Borrowed</code> variant of <code>Cow</code> from a reference to <code>Vec</code>.\nConverts a <code>&amp;</code><code>CString</code> into a borrowed <code>Cow</code> without copying or …\nCalls <code>U::from(self)</code>.\nExtracts the owned data.\nReturns true if the data is borrowed, i.e. if <code>to_mut</code> would …\nReturns true if the data is owned, i.e. if <code>to_mut</code> would be …\nAcquires a mutable reference to the owned form of the data.\nPrelude to include needed traits An access error for …\nan array\nThe array structure\nThe type for Arrays\nThe type for Arrays\nThe array structure\nThe array structure\nThe array structure\nThe type for Arrays\nPrelude to include needed traits Mutability functions for …\nPrelude to include needed traits A trait for the minimal …\nPrelude to include needed traits Base generator trait\nA boolean value\na boolean\nA single utf-8 character\na custom type\nElements of the array\nElements of the array\nThe values in the object\nThe values in the object\nExtended types that do not have a real representation in …\nPrelude to include needed traits Extended types that have …\nA 32 bit floating point value\nA floating point value\na float type\na 128 bit signed integer\nA 16 bit signed integer value\nA 32 bit signed integer value\nA signed 64 bit integer.\na signed integer type\nA 8 bit signed integer value\nThe key in the objects\nThe key in the objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Object Keys\nThe type for Objects\nPrelude to include needed traits Mutatability for array …\nPrelude to include needed traits Mutatability for object …\nNot a value at all\nAn access attempt to a Value was made under the assumption …\nAn access attempt to a Value was made under the assumption …\nThe null value\nnull\nan object\nThe object structure\nThe type for Objects\nThe type for Objects\nThe object structure\nThe object structure\nThe object structure\nThe type for Objects\nThe type for Objects\nPrelude to include needed traits A mutable value Object\nPrelude to include needed traits A trait for the minimal …\nPrelude to include needed traits Static tape node\na string type\nThe type for Strings\nThe type for Strings\nThe writer\nThe target for nested lookups\nThe target for nested lookups\nThe target for nested lookups\nThe target for nested lookups\nThe type for Object Values\nThe target for nested lookups\nThe type for Array Values\nThe target for nested lookups\nPrelude to include needed traits A type error thrown by …\nPrelude to include needed traits Type checks for container …\nPrelude to include needed traits Type checks for custom …\nPrelude to include needed traits Type checks for scalar …\nPrelude to include needed traits Type information on a …\na 128 bit unsigned integer\nA 16 bit unsigned integer value\nA 32 bit unsigned integer value\nAn unsigned 64 bit integer.\na unsigned integer type\nA 8 bit unsigned integer value\nA useize value\nPrelude to include needed traits Access to a value as an …\nPrelude to include needed traits Access to a value as an …\nPrelude to include needed traits Trait to allow accessing …\nPrelude to include needed traits Mutatability for …\nPrelude to include needed traits Access to scalar value …\nPrelude to include needed traits Support of builder …\nPrelude to include needed traits A trait that specifies …\nPrelude to include needed traits A trait that specifies …\nPrelude to include needed traits Access to a value as an …\nPrelude to include needed traits Access to container …\nPrelude to include needed traits Access to scalar values …\nPrelude to include needed traits <code>try_as_*</code> access to …\nPrelude to include needed traits <code>try_as_*</code> access to scalar …\nPrelude to include needed traits <code>try_as_*</code> access to a …\nPrelude to include needed traits <code>try_as_*</code> access to …\nPrelude to include needed traits <code>try_as_*</code> access to scalar …\nPrelude to include needed traits A trait that specifies …\nPrelude to include needed traits A trait that allows …\nPrelude to include needed traits Types of JSON values\nPrelude to include needed traits A Value that can be …\nReturns an empty array\nReturns an empty array with a given capacity\nTries to represent the value as an array and returns a …\nTries to represent the value as an array and returns a …\nTries to represent the value as a bool\nTries to represent the value as a Char\nTries to represent the value as a f32\nTries to represent the value as a f64\nTries to represent the value as an i128\nTries to represent the value as an i16\nTries to represent the value as an i32\nTries to represent the value as an i64\nTries to represent the value as an i8\nTries to represent the value as a ‘null’;\nTries to represent the value as an object and returns a …\nTries to represent the value as an object and returns a …\nTries to represent the value as a &amp;str\nTries to represent the value as an u128\nTries to represent the value as an u16\nTries to represent the value as an u32\nTries to represent the value as an u64\nTries to represent the value as an u8\nTries to represent the value as an usize\nPrelude to include needed traits Traits that provide basic …\nCasts the current value to a f64 if possible, this will …\nChecks if a Value contains a given key. This will return …\ndedents one step\nPrelude to include needed traits Traits that have derived …\nEncodes the value into it’s JSON representation as a …\nEncodes the value into it’s JSON representation as a …\nThe expected value type\nPrelude to include needed traits Traits for serializing …\nGets a ref to a value based on n index, returns <code>None</code> if the\nGets a ref to a value based on a key, returns <code>None</code> if the …\nGets a ref to a value based on a key, returns <code>None</code> if the …\nTries to get an element of an object as a array\nTries to get an element of an object as a bool\nTries to get an element of an object as a f32\nTries to get an element of an object as a f64\nTries to get an element of an object as a i128\nTries to get an element of an object as a i16\nTries to get an element of an object as a i32\nTries to get an element of an object as a i64\nTries to get an element of an object as a i8\nGets a ref to a value based on n index, returns <code>None</code> if the\nSame as <code>get_idx</code> but returns a mutable ref instead\nGets a ref to a value based on n index, returns <code>None</code> if the\nGets the value of a key as a mutable reference.\nSame as <code>get</code> but returns a mutable ref instead\nTries to get an element of an object as a object\nTries to get an element of an object as a str\nTries to get an element of an object as a u128\nTries to get an element of an object as a u16\nTries to get an element of an object as a u32\nTries to get an element of an object as a u64\nTries to get an element of an object as a u8\nTries to get an element of an object as a usize\nreturns the writer\nThe actual value type\nindents one step\nInserts a value\nInsert into this <code>Value</code> as an <code>Object</code>. Will return an …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nTries to turn the value into it’s string representation\nreturns true if the current value can be represented as an …\nreturns true if the current value a bool\nreturns true if the current value can be represented as a …\nreturns if a type is a custom type\nReturns if the array is empty\nReturns if the array is empty\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be cast into a f64\nreturns true if the current value a floatingpoint number\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value a integer number\nreturns true if the current value is null\nreturns true if the current value a number either float or …\nreturns true if the current value can be represented as an …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nIterates over the values paris\nIterates over the key value paris\nIterates over the keys\nNumber of key/value pairs\nNumber of key/value pairs\nwrites new line\nReturns anull value\nReturns an empty object\nReturns an empty object with a given capacity\nReturns the last element of the array or <code>None</code>\nPops from this <code>Value</code> as an <code>Array</code>. Will return an …\nAppends e to the end of the <code>Array</code>\nPushes to this <code>Value</code> as an <code>Array</code>. Will return an …\nRemoves a value from the object\nRemove from this <code>Value</code> as an <code>Object</code>. Will return an …\nTries to represent the value as an array and returns a …\nTries to represent the value as a bool\nTries to represent the value as a Char\nTries to represent the value as a f32\nTries to represent the value as a f64\nTries to represent the value as a i128\nTries to represent the value as an i16\nTries to represent the value as an i32\nTries to represent the value as an i64\nTries to represent the value as an i8\nTries to represent the value as an object and returns a …\nTries to represent the value as a &amp;str\nTries to represent the value as an u128\nTries to represent the value as an u16\nTries to represent the value as an u32\nTries to represent the value as an u64\nTries to represent the value as an u8\nTries to represent the value as an usize\nTries to Casts the current value to a f64 if possible, …\nTries to get a value based on a key, returns a <code>TryTypeError</code>…\nTries to get an element of an object as an array, returns …\nTries to get an element of an object as a bool, returns an …\nTries to get an element of an object as a f32, returns an …\nTries to get an element of an object as a f64, returns an …\nTries to get an element of an object as a i128, returns an …\nTries to get an element of an object as a i16, returns an …\nTries to get an element of an object as a i32, returns an …\nTries to get an element of an object as a i64, returns an …\nTries to get an element of an object as a i8, returns an …\nTries to get a value based on n index, returns a type …\nTries to get an element of an object as an object, returns …\nTries to get an element of an object as a str, returns an …\nTries to get an element of an object as a u128, returns an …\nTries to get an element of an object as a u16, returns an …\nTries to get an element of an object as a u32, returns an …\nTries to get an element of an object as a u64, returns an …\nTries to get an element of an object as a u8, returns an …\nTries to get an element of an object as a usize, returns …\nTries to insert into this <code>Value</code> as an <code>Object</code>. If the <code>Value</code> …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nTries to turn the value into it’s string representation\nTries to pop from a <code>Value</code> as an <code>Array</code>. if the <code>Value</code> is any …\nTries to push to a <code>Value</code> if as an <code>Array</code>. This function …\nTries to remove from this <code>Value</code> as an <code>Object</code>. If the <code>Value</code> …\nGets the type of the current value\nIterates over the values\nEncodes the value into it’s JSON representation into a …\nWrite a slice\nWrite a char\nwrites a float value\nwrites an integer value\nwrite with minimum\nEncodes the value into it’s JSON representation into a …\nwrites a simple string content  (usually short and non …\nwrites a simple string (usually short and non escaped) …\nSafety\nwrites a string\nwrites a string\nThe array structure\nThe type for Arrays\nThe type for Arrays\nThe object structure\nThe type for Objects\nThe type for Objects\nThe type for Strings\nType checks for custom values on a value\nType information on a value\nTrait to allow accessing data inside a Value\nMutatability for container values\nAccess to scalar value types\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA Value that can be serialized and written\nTries to represent the value as an array and returns a …\nTries to represent the value as an array and returns a …\nTries to represent the value as a bool\nTries to represent the value as a Char\nTries to represent the value as a f32\nTries to represent the value as a f64\nTries to represent the value as an i128\nTries to represent the value as an i16\nTries to represent the value as an i32\nTries to represent the value as an i64\nTries to represent the value as an i8\nTries to represent the value as a ‘null’;\nTries to represent the value as an object and returns a …\nTries to represent the value as an object and returns a …\nTries to represent the value as a &amp;str\nTries to represent the value as an u128\nTries to represent the value as an u16\nTries to represent the value as an u32\nTries to represent the value as an u64\nTries to represent the value as an u8\nTries to represent the value as an usize\nCasts the current value to a f64 if possible, this will …\nEncodes the value into it’s JSON representation as a …\nEncodes the value into it’s JSON representation as a …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nTries to turn the value into it’s string representation\nreturns if a type is a custom type\nGets the type of the current value\nEncodes the value into it’s JSON representation into a …\nEncodes the value into it’s JSON representation into a …\nThe array structure\nThe array structure\nThe array structure\nThe type for Arrays\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Object Keys\nThe type for Objects\nMutatability for array like values\nMutatability for object like values\nThe object structure\nThe object structure\nThe object structure\nThe type for Objects\nThe type for Objects\nThe type for Strings\nThe target for nested lookups\nThe target for nested lookups\nThe target for nested lookups\nThe target for nested lookups\nThe type for Object Values\nThe target for nested lookups\nThe type for Array Values\nThe target for nested lookups\nType checks for container values on a value\nType checks for scalar values on a value\nAccess to a value as an array\nAccess to a value as an array with error handling\nAccess to a value as an object\nAccess to container values in an object\nAccess to scalar values in an object\n<code>try_as_*</code> access to container values in an object\n<code>try_as_*</code> access to scalar values in an object\n<code>try_as_*</code> access to a value as an object\n<code>try_as_*</code> access to container value types\n<code>try_as_*</code> access to scalar value types\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA trait that allows destructively turning a value into it…\nChecks if a Value contains a given key. This will return …\nGets a ref to a value based on a key, returns <code>None</code> if the …\nTries to get an element of an object as a array\nTries to get an element of an object as a bool\nTries to get an element of an object as a f32\nTries to get an element of an object as a f64\nTries to get an element of an object as a i128\nTries to get an element of an object as a i16\nTries to get an element of an object as a i32\nTries to get an element of an object as a i64\nTries to get an element of an object as a i8\nGets a ref to a value based on n index, returns <code>None</code> if the\nSame as <code>get_idx</code> but returns a mutable ref instead\nSame as <code>get</code> but returns a mutable ref instead\nTries to get an element of an object as a object\nTries to get an element of an object as a str\nTries to get an element of an object as a u128\nTries to get an element of an object as a u16\nTries to get an element of an object as a u32\nTries to get an element of an object as a u64\nTries to get an element of an object as a u8\nTries to get an element of an object as a usize\nInsert into this <code>Value</code> as an <code>Object</code>. Will return an …\nreturns true if the current value can be represented as an …\nreturns true if the current value a bool\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be cast into a f64\nreturns true if the current value a floatingpoint number\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value a integer number\nreturns true if the current value is null\nreturns true if the current value a number either float or …\nreturns true if the current value can be represented as an …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nPops from this <code>Value</code> as an <code>Array</code>. Will return an …\nPushes to this <code>Value</code> as an <code>Array</code>. Will return an …\nRemove from this <code>Value</code> as an <code>Object</code>. Will return an …\nTries to represent the value as an array and returns a …\nTries to represent the value as a bool\nTries to represent the value as a Char\nTries to represent the value as a f32\nTries to represent the value as a f64\nTries to represent the value as a i128\nTries to represent the value as an i16\nTries to represent the value as an i32\nTries to represent the value as an i64\nTries to represent the value as an i8\nTries to represent the value as an object and returns a …\nTries to represent the value as a &amp;str\nTries to represent the value as an u128\nTries to represent the value as an u16\nTries to represent the value as an u32\nTries to represent the value as an u64\nTries to represent the value as an u8\nTries to represent the value as an usize\nTries to Casts the current value to a f64 if possible, …\nTries to get a value based on a key, returns a <code>TryTypeError</code>…\nTries to get an element of an object as an array, returns …\nTries to get an element of an object as a bool, returns an …\nTries to get an element of an object as a f32, returns an …\nTries to get an element of an object as a f64, returns an …\nTries to get an element of an object as a i128, returns an …\nTries to get an element of an object as a i16, returns an …\nTries to get an element of an object as a i32, returns an …\nTries to get an element of an object as a i64, returns an …\nTries to get an element of an object as a i8, returns an …\nTries to get a value based on n index, returns a type …\nTries to get an element of an object as an object, returns …\nTries to get an element of an object as a str, returns an …\nTries to get an element of an object as a u128, returns an …\nTries to get an element of an object as a u16, returns an …\nTries to get an element of an object as a u32, returns an …\nTries to get an element of an object as a u64, returns an …\nTries to get an element of an object as a u8, returns an …\nTries to get an element of an object as a usize, returns …\nTries to insert into this <code>Value</code> as an <code>Object</code>. If the <code>Value</code> …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nTries to turn the value into it’s string representation\nTries to pop from a <code>Value</code> as an <code>Array</code>. if the <code>Value</code> is any …\nTries to push to a <code>Value</code> if as an <code>Array</code>. This function …\nTries to remove from this <code>Value</code> as an <code>Object</code>. If the <code>Value</code> …\nBase generator trait\nSimple dump Generator\nPretty Generator\nPretty Writer Generator\nThe writer\nWriter Generator\ndedents one step\nreturns the writer\nindents one step\nwrites new line\nWrite a slice\nWrite a char\nwrites a float value\nwrites an integer value\nwrite with minimum\nwrites a simple string content  (usually short and non …\nwrites a simple string (usually short and non escaped) …\nSafety\nwrites a string\nwrites a string\nSerde can not reflect NAN or Infinity\nThe number is out of the 64 bit bound\nSomething horrible went wrong, please open a ticket at …\nError while converting from or to serde values\nReturns the argument unchanged.\nTries to convert a <code>BorrowedValue</code> into a struct that …\nTries to convert a <code>OwnedValue</code> into a struct that implements\nparses a Reader using a serde deserializer.\nParses a Reader using a serde deserializer.\nTries to convert a <code>&amp;BorrowedValue</code> into a struct that …\nTries to convert a <code>&amp;OwnedValue</code> into a struct that …\nparses a byte slice using a serde deserializer. note that …\nParses a byte slice using a serde deserializer. note that …\nParses a str using a serde deserializer. note that the …\nParses a str using a serde deserializer. note that the …\nCalls <code>U::from(self)</code>.\nTries to convert a struct that implements serde’s …\nTries to convert a struct that implements serde’s …\nWrite a value to a string\nWrite a value to a string\nWrite a value to a vector\nWrite a value to a vector\nWrite a value to a string\nWrite a value to a string\nAn access error for <code>ValueType</code>\nan array\nA boolean value\na boolean\nA single utf-8 character\na custom type\nExtended types that do not have a real representation in …\nExtended types that have no native representation in JSON\nA 32 bit floating point value\nA floating point value\na float type\na 128 bit signed integer\nA 16 bit signed integer value\nA 32 bit signed integer value\nA signed 64 bit integer.\na signed integer type\nA 8 bit signed integer value\nNot a value at all\nAn access attempt to a Value was made under the assumption …\nAn access attempt to a Value was made under the assumption …\nThe null value\nnull\nan object\nHasher used for objects\nStatic tape node\na string type\nA type error thrown by the <code>try_*</code> functions\na 128 bit unsigned integer\nA 16 bit unsigned integer value\nA 32 bit unsigned integer value\nAn unsigned 64 bit integer.\na unsigned integer type\nA 8 bit unsigned integer value\nA useize value\nSupport of builder methods for traits.\nTypes of JSON values\nReturns an empty array\nReturns an empty array with a given capacity\nThis module holds the two dom implementations we use. We …\nParses a slice of bytes into a Value dom. This function …\nParses a slice of bytes into a Value dom. This function …\nThe expected value type\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTraits for serializing JSON\nThe actual value type\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns anull value\nReturns an empty object\nReturns an empty object with a given capacity\nOwned, lifetimeless version of the value for times when …\nPrelude for traits\nTape implementation\narray type\nRepresentation of a JSON object\nobject type\nStatic values\nstring type\nBorrowed JSON-DOM Value, consider using the <code>ValueTrait</code> to …\nGet mutable access to a map.\nClones the current value and enforces a static lifetime, …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEnforces static lifetime on a borrowed value, this will …\nParses a slice of bytes into a Value dom. This function …\nParses a slice of bytes into a Value dom. This function …\nTries to get a value based on n index, returns a type …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nBase generator trait\nSimple dump Generator\nPretty Generator\nPretty Writer Generator\nThe writer\nWriter Generator\nReturns the data as a String\nReturns the data as a String\ndedents one step\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nreturns the writer\nindents one step\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new generator\nCreates a new pretty printing generator\nCreates a new generator\nCreates a new generator\nwrites new line\nWrite a slice\nWrite a char\nwrites a float value\nwrites an integer value\nwrite with minimum\nwrites a simple string content  (usually short and non …\nwrites a simple string (usually short and non escaped) …\nSafety\nwrites a string\nwrites a string\narray type\nRepresentation of a JSON object\nobject type\nStatic values\nstring type\nOwned JSON-DOM Value, consider using the <code>ValueTrait</code> to …\nReturns the argument unchanged.\nSame as <code>get_idx</code> but returns a mutable ref instead\nCalls <code>U::from(self)</code>.\nPops from this <code>Value</code> as an <code>Array</code>. Will return an …\nParses a slice of bytes into a Value dom. This function …\nParses a slice of bytes into a Value dom. This function …\nTries to get a value based on n index, returns a type …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nAn access error for <code>ValueType</code>\nan array\nThe array structure\nThe type for Arrays\nThe type for Arrays\nThe array structure\nThe array structure\nThe array structure\nThe type for Arrays\nMutability functions for a value array\nA trait for the minimal common functionality of a vale …\nBase generator trait\nA boolean value\na boolean\nA single utf-8 character\na custom type\nElements of the array\nElements of the array\nThe values in the object\nThe values in the object\nExtended types that do not have a real representation in …\nExtended types that have no native representation in JSON\nA 32 bit floating point value\nA floating point value\na float type\na 128 bit signed integer\nA 16 bit signed integer value\nA 32 bit signed integer value\nA signed 64 bit integer.\na signed integer type\nA 8 bit signed integer value\nThe key in the objects\nThe key in the objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Object Keys\nThe type for Objects\nMutatability for array like values\nMutatability for object like values\nNot a value at all\nAn access attempt to a Value was made under the assumption …\nAn access attempt to a Value was made under the assumption …\nThe null value\nnull\nan object\nThe object structure\nThe type for Objects\nThe type for Objects\nThe object structure\nThe object structure\nThe object structure\nThe type for Objects\nThe type for Objects\nA mutable value Object\nA trait for the minimal common functionality of a vale …\nStatic tape node\na string type\nThe type for Strings\nThe type for Strings\nThe writer\nThe target for nested lookups\nThe target for nested lookups\nThe target for nested lookups\nThe target for nested lookups\nThe type for Object Values\nThe target for nested lookups\nThe type for Array Values\nThe target for nested lookups\nA type error thrown by the <code>try_*</code> functions\nType checks for container values on a value\nType checks for custom values on a value\nType checks for scalar values on a value\nType information on a value\na 128 bit unsigned integer\nA 16 bit unsigned integer value\nA 32 bit unsigned integer value\nAn unsigned 64 bit integer.\na unsigned integer type\nA 8 bit unsigned integer value\nA useize value\nAccess to a value as an array\nAccess to a value as an array with error handling\nTrait to allow accessing data inside a Value\nMutatability for container values\nAccess to scalar value types\nSupport of builder methods for traits.\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA trait that specifies how to turn the Value <code>into</code> it’s …\nAccess to a value as an object\nAccess to container values in an object\nAccess to scalar values in an object\n<code>try_as_*</code> access to container values in an object\n<code>try_as_*</code> access to scalar values in an object\n<code>try_as_*</code> access to a value as an object\n<code>try_as_*</code> access to container value types\n<code>try_as_*</code> access to scalar value types\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA trait that allows destructively turning a value into it…\nTypes of JSON values\nA Value that can be serialized and written\nReturns an empty array\nReturns an empty array with a given capacity\nTries to represent the value as an array and returns a …\nTries to represent the value as an array and returns a …\nTries to represent the value as a bool\nTries to represent the value as a Char\nTries to represent the value as a f32\nTries to represent the value as a f64\nTries to represent the value as an i128\nTries to represent the value as an i16\nTries to represent the value as an i32\nTries to represent the value as an i64\nTries to represent the value as an i8\nTries to represent the value as a ‘null’;\nTries to represent the value as an object and returns a …\nTries to represent the value as an object and returns a …\nTries to represent the value as a &amp;str\nTries to represent the value as an u128\nTries to represent the value as an u16\nTries to represent the value as an u32\nTries to represent the value as an u64\nTries to represent the value as an u8\nTries to represent the value as an usize\nTraits that provide basic interactions, they do have no …\nCasts the current value to a f64 if possible, this will …\nChecks if a Value contains a given key. This will return …\ndedents one step\nTraits that have derived implementations relying on <code>base</code> …\nEncodes the value into it’s JSON representation as a …\nEncodes the value into it’s JSON representation as a …\nThe expected value type\nGets a ref to a value based on n index, returns <code>None</code> if the\nGets a ref to a value based on a key, returns <code>None</code> if the …\nGets a ref to a value based on a key, returns <code>None</code> if the …\nTries to get an element of an object as a array\nTries to get an element of an object as a bool\nTries to get an element of an object as a f32\nTries to get an element of an object as a f64\nTries to get an element of an object as a i128\nTries to get an element of an object as a i16\nTries to get an element of an object as a i32\nTries to get an element of an object as a i64\nTries to get an element of an object as a i8\nGets a ref to a value based on n index, returns <code>None</code> if the\nSame as <code>get_idx</code> but returns a mutable ref instead\nGets a ref to a value based on n index, returns <code>None</code> if the\nGets the value of a key as a mutable reference.\nSame as <code>get</code> but returns a mutable ref instead\nTries to get an element of an object as a object\nTries to get an element of an object as a str\nTries to get an element of an object as a u128\nTries to get an element of an object as a u16\nTries to get an element of an object as a u32\nTries to get an element of an object as a u64\nTries to get an element of an object as a u8\nTries to get an element of an object as a usize\nreturns the writer\nThe actual value type\nindents one step\nInserts a value\nInsert into this <code>Value</code> as an <code>Object</code>. Will return an …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nTries to turn the value into it’s string representation\nreturns true if the current value can be represented as an …\nreturns true if the current value a bool\nreturns true if the current value can be represented as a …\nreturns if a type is a custom type\nReturns if the array is empty\nReturns if the array is empty\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be cast into a f64\nreturns true if the current value a floatingpoint number\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value a integer number\nreturns true if the current value is null\nreturns true if the current value a number either float or …\nreturns true if the current value can be represented as an …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nIterates over the values paris\nIterates over the key value paris\nIterates over the keys\nNumber of key/value pairs\nNumber of key/value pairs\nwrites new line\nReturns anull value\nReturns an empty object\nReturns an empty object with a given capacity\nReturns the last element of the array or <code>None</code>\nPops from this <code>Value</code> as an <code>Array</code>. Will return an …\nAppends e to the end of the <code>Array</code>\nPushes to this <code>Value</code> as an <code>Array</code>. Will return an …\nRemoves a value from the object\nRemove from this <code>Value</code> as an <code>Object</code>. Will return an …\nTries to represent the value as an array and returns a …\nTries to represent the value as a bool\nTries to represent the value as a Char\nTries to represent the value as a f32\nTries to represent the value as a f64\nTries to represent the value as a i128\nTries to represent the value as an i16\nTries to represent the value as an i32\nTries to represent the value as an i64\nTries to represent the value as an i8\nTries to represent the value as an object and returns a …\nTries to represent the value as a &amp;str\nTries to represent the value as an u128\nTries to represent the value as an u16\nTries to represent the value as an u32\nTries to represent the value as an u64\nTries to represent the value as an u8\nTries to represent the value as an usize\nTries to Casts the current value to a f64 if possible, …\nTries to get a value based on a key, returns a <code>TryTypeError</code>…\nTries to get an element of an object as an array, returns …\nTries to get an element of an object as a bool, returns an …\nTries to get an element of an object as a f32, returns an …\nTries to get an element of an object as a f64, returns an …\nTries to get an element of an object as a i128, returns an …\nTries to get an element of an object as a i16, returns an …\nTries to get an element of an object as a i32, returns an …\nTries to get an element of an object as a i64, returns an …\nTries to get an element of an object as a i8, returns an …\nTries to get a value based on n index, returns a type …\nTries to get an element of an object as an object, returns …\nTries to get an element of an object as a str, returns an …\nTries to get an element of an object as a u128, returns an …\nTries to get an element of an object as a u16, returns an …\nTries to get an element of an object as a u32, returns an …\nTries to get an element of an object as a u64, returns an …\nTries to get an element of an object as a u8, returns an …\nTries to get an element of an object as a usize, returns …\nTries to insert into this <code>Value</code> as an <code>Object</code>. If the <code>Value</code> …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nTries to turn the value into it’s string representation\nTries to pop from a <code>Value</code> as an <code>Array</code>. if the <code>Value</code> is any …\nTries to push to a <code>Value</code> if as an <code>Array</code>. This function …\nTries to remove from this <code>Value</code> as an <code>Object</code>. If the <code>Value</code> …\nGets the type of the current value\nIterates over the values\nEncodes the value into it’s JSON representation into a …\nWrite a slice\nWrite a char\nwrites a float value\nwrites an integer value\nwrite with minimum\nEncodes the value into it’s JSON representation into a …\nwrites a simple string content  (usually short and non …\nwrites a simple string (usually short and non escaped) …\nSafety\nwrites a string\nwrites a string\nThe array structure\nThe type for Arrays\nThe type for Arrays\nThe object structure\nThe type for Objects\nThe type for Objects\nThe type for Strings\nType checks for custom values on a value\nType information on a value\nTrait to allow accessing data inside a Value\nMutatability for container values\nAccess to scalar value types\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA Value that can be serialized and written\nTries to represent the value as an array and returns a …\nTries to represent the value as an array and returns a …\nTries to represent the value as a bool\nTries to represent the value as a Char\nTries to represent the value as a f32\nTries to represent the value as a f64\nTries to represent the value as an i128\nTries to represent the value as an i16\nTries to represent the value as an i32\nTries to represent the value as an i64\nTries to represent the value as an i8\nTries to represent the value as a ‘null’;\nTries to represent the value as an object and returns a …\nTries to represent the value as an object and returns a …\nTries to represent the value as a &amp;str\nTries to represent the value as an u128\nTries to represent the value as an u16\nTries to represent the value as an u32\nTries to represent the value as an u64\nTries to represent the value as an u8\nTries to represent the value as an usize\nCasts the current value to a f64 if possible, this will …\nEncodes the value into it’s JSON representation as a …\nEncodes the value into it’s JSON representation as a …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nTries to turn the value into it’s string representation\nreturns if a type is a custom type\nGets the type of the current value\nEncodes the value into it’s JSON representation into a …\nEncodes the value into it’s JSON representation into a …\nThe array structure\nThe array structure\nThe array structure\nThe type for Arrays\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Objects\nThe type for Object Keys\nThe type for Objects\nMutatability for array like values\nMutatability for object like values\nThe object structure\nThe object structure\nThe object structure\nThe type for Objects\nThe type for Objects\nThe type for Strings\nThe target for nested lookups\nThe target for nested lookups\nThe target for nested lookups\nThe target for nested lookups\nThe type for Object Values\nThe target for nested lookups\nThe type for Array Values\nThe target for nested lookups\nType checks for container values on a value\nType checks for scalar values on a value\nAccess to a value as an array\nAccess to a value as an array with error handling\nAccess to a value as an object\nAccess to container values in an object\nAccess to scalar values in an object\n<code>try_as_*</code> access to container values in an object\n<code>try_as_*</code> access to scalar values in an object\n<code>try_as_*</code> access to a value as an object\n<code>try_as_*</code> access to container value types\n<code>try_as_*</code> access to scalar value types\nA trait that specifies how to turn the Value <code>into</code> it’s …\nA trait that allows destructively turning a value into it…\nChecks if a Value contains a given key. This will return …\nGets a ref to a value based on a key, returns <code>None</code> if the …\nTries to get an element of an object as a array\nTries to get an element of an object as a bool\nTries to get an element of an object as a f32\nTries to get an element of an object as a f64\nTries to get an element of an object as a i128\nTries to get an element of an object as a i16\nTries to get an element of an object as a i32\nTries to get an element of an object as a i64\nTries to get an element of an object as a i8\nGets a ref to a value based on n index, returns <code>None</code> if the\nSame as <code>get_idx</code> but returns a mutable ref instead\nSame as <code>get</code> but returns a mutable ref instead\nTries to get an element of an object as a object\nTries to get an element of an object as a str\nTries to get an element of an object as a u128\nTries to get an element of an object as a u16\nTries to get an element of an object as a u32\nTries to get an element of an object as a u64\nTries to get an element of an object as a u8\nTries to get an element of an object as a usize\nInsert into this <code>Value</code> as an <code>Object</code>. Will return an …\nreturns true if the current value can be represented as an …\nreturns true if the current value a bool\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be cast into a f64\nreturns true if the current value a floatingpoint number\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value a integer number\nreturns true if the current value is null\nreturns true if the current value a number either float or …\nreturns true if the current value can be represented as an …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nreturns true if the current value can be represented as a …\nPops from this <code>Value</code> as an <code>Array</code>. Will return an …\nPushes to this <code>Value</code> as an <code>Array</code>. Will return an …\nRemove from this <code>Value</code> as an <code>Object</code>. Will return an …\nTries to represent the value as an array and returns a …\nTries to represent the value as a bool\nTries to represent the value as a Char\nTries to represent the value as a f32\nTries to represent the value as a f64\nTries to represent the value as a i128\nTries to represent the value as an i16\nTries to represent the value as an i32\nTries to represent the value as an i64\nTries to represent the value as an i8\nTries to represent the value as an object and returns a …\nTries to represent the value as a &amp;str\nTries to represent the value as an u128\nTries to represent the value as an u16\nTries to represent the value as an u32\nTries to represent the value as an u64\nTries to represent the value as an u8\nTries to represent the value as an usize\nTries to Casts the current value to a f64 if possible, …\nTries to get a value based on a key, returns a <code>TryTypeError</code>…\nTries to get an element of an object as an array, returns …\nTries to get an element of an object as a bool, returns an …\nTries to get an element of an object as a f32, returns an …\nTries to get an element of an object as a f64, returns an …\nTries to get an element of an object as a i128, returns an …\nTries to get an element of an object as a i16, returns an …\nTries to get an element of an object as a i32, returns an …\nTries to get an element of an object as a i64, returns an …\nTries to get an element of an object as a i8, returns an …\nTries to get a value based on n index, returns a type …\nTries to get an element of an object as an object, returns …\nTries to get an element of an object as a str, returns an …\nTries to get an element of an object as a u128, returns an …\nTries to get an element of an object as a u16, returns an …\nTries to get an element of an object as a u32, returns an …\nTries to get an element of an object as a u64, returns an …\nTries to get an element of an object as a u8, returns an …\nTries to get an element of an object as a usize, returns …\nTries to insert into this <code>Value</code> as an <code>Object</code>. If the <code>Value</code> …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nTries to turn the value into it’s string representation\nTries to pop from a <code>Value</code> as an <code>Array</code>. if the <code>Value</code> is any …\nTries to push to a <code>Value</code> if as an <code>Array</code>. This function …\nTries to remove from this <code>Value</code> as an <code>Object</code>. If the <code>Value</code> …\nWrapper around the tape that allows interacting with it …\nAn array with a given size starts here. The next <code>size</code> …\nTape <code>Node</code>\nWrapper around the tape that allows interacting with it …\nAn <code>Object</code> with the given <code>size</code> starts here. the following …\nA static value that is interned into the tape, it can be …\nA string, located inside the input slice\n<code>Tape</code>\nWrapper around the tape that allows interaction via a <code>Value</code>…\nTries to represent the value as an array and returns a …\nTries to represent the value as an array and returns a …\nFIXME: add docs\nChecks if a Value contains a given key. This will return …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nFIXME: docs\nFIXME: docs\nGets a ref to a value based on a key, returns <code>None</code> if the …\nTries to get an element of an object as a array\nGets a ref to a value based on n index, returns <code>None</code> if the\nTries to get an element of an object as a object\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nreturns true if the current value can be represented as an …\nFIXME: docs\nFIXME: docs\nreturns true if the current value can be represented as an …\nFIXME: docs\nFIXME: docs\nFIXME: docs\nFIXME: docs\nFIXME: docs\nCreates an empty tape with a null element in it\nClears the tape and returns it with a new lifetime to …\nTries to represent the value as an array and returns a …\nTries to represent the value as an object and returns a …\nTries to get a value based on a key, returns a <code>TryTypeError</code>…\nTries to get an element of an object as an array, returns …\nTries to get a value based on n index, returns a type …\nTries to get an element of an object as an object, returns …\nTries to turn the value into it’s array representation\nTries to turn the value into it’s object representation\nFIXME: docs\nThe total number of nodes in the object, including …\nThe total number of nodes in the array, including …\nThe number of keys in the object\nThe number of elements in the array")