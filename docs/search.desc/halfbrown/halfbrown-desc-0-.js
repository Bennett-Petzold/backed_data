searchState.loadedDescShard("halfbrown", 0, "Halfbrown is a hashmap implementation that provides high …\nDefault hasher for <code>HashMap</code>.\nDrains the map\nA view into a single entry in a map, which may either be …\n<code>SizedHashMap</code> implementation that alternates between a …\nInto iterator for a Halfbrown map\nIterator over the key value pairs of a Halfbrown map\nMutable iterator over the key value pairs\nIterator over the keys\nAn occupied entry.\nAn occupied entry.\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA builder for computing where in a [<code>HashMap</code>] a key-value …\nA builder for computing where in a [<code>HashMap</code>] a key-value …\nA view into a single entry in a map, which may either be …\nA view into an occupied entry in a <code>HashMap</code>. It is part of …\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nMaximum nymber of elements before the representaiton is …\nA vacant entry.\nA vacant entry.\nA view into a vacant entry in a <code>HashMap</code>. It is part of the …\nIterator over the values\nMutable iterator over the values\nProvides in-place mutable access to an occupied entry …\nProvides in-place mutable access to an occupied entry …\nReturns the number of elements the map can hold without …\nClears the map, removing all key-value pairs. Keeps the …\nReturns <code>true</code> if the map contains a value for the specified …\nClears the map, returning all key-value pairs as an …\nGets the given key’s corresponding entry in the map for …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a <code>RawEntryMut</code> from the given hash.\nAccess an entry by hash.\nCreates a <code>RawEntryMut</code> from the given key.\nAccess an entry by key.\nCreates a <code>RawEntryMut</code> from the given key and its hash.\nAccess an entry by a key and its hash.\nGets a reference to the value in the entry.\nGets a reference to the value in the entry.\nReturns a reference to the value corresponding to the key.\nGets a reference to the key and value in the entry.\nGets a mutable reference to the key and value in the entry.\nGets a mutable reference to the value in the entry.\nGets a mutable reference to the value in the entry.\nReturns a mutable reference to the value corresponding to …\nReturns a reference to the map’s <code>BuildHasher</code>.\nCreate a <strong><code>HashMap</code></strong> from a list of key-value pairs\nReturns a reference to the value corresponding to the …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns a …\nSets the value of the entry, and returns the entry’s old …\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nInserts a key-value pair into the map.\nSets the value of the entry with the <code>VacantEntry</code>’s key, …\nSets the value of the entry, and returns the entry’s old …\nInserts element, this ignores check in the vector map if …\nSet the value of an entry with a custom hasher function.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nTake ownership of the key.\nConverts the entry into a mutable reference to the key in …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nConverts the <code>OccupiedEntry</code> into a mutable reference to the …\nIf this iteratoris empty\nReturns <code>true</code> if the map contains no elements.\nChecks if the current backend is a map, if so returns true.\nChecks if the current backend is a vector, if so returns …\nAn iterator visiting all key-value pairs in arbitrary …\nAn iterator visiting all key-value pairs in arbitrary …\nReturns a reference to this entry’s key.\nGets a reference to the key in the entry.\nGets a reference to the key that would be used when …\nGets a reference to the key in the entry.\nGets a mutable reference to the key in the entry.\nAn iterator visiting all keys in arbitrary order. The …\nThe length of this iterator\nReturns the number of elements in the map.\nCreates an empty <code>HashMap</code>.\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the default …\nEnsures a value is in the entry by inserting the result of …\nEnsures a value is in the entry by inserting the result of …\nCreates a raw immutable entry builder for the <code>HashMap</code>.\nCreates a raw entry builder for the <code>HashMap</code>.\nTakes the value out of the entry, and returns it.\nTakes the value out of the entry, and returns it.\nRemoves a key from the map, returning the value at the key …\nTake the ownership of the key and value from the map.\nTake the ownership of the key and value from the map.\nRemoves a key from the map, returning the stored key and …\nReplaces the entry, returning the old key and value. The …\nReplaces the key in the hash map with the key used to …\nReserves capacity for at least <code>additional</code> more elements to …\nRetains only the elements specified by the predicate.\nShrinks the capacity of the map as much as possible. It …\nAn iterator visiting all values in arbitrary order. The …\nAn iterator visiting all values mutably in arbitrary order.\nSame as with capacity with the difference that it, despite …\nCreates an empty <code>HashMap</code> with the specified capacity.\nCreates an empty <code>HashMap</code> with the specified capacity, …\nCreates an empty <code>HashMap</code> which will use the given hash …")