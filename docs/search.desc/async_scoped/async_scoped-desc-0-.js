searchState.loadedDescShard("async_scoped", 0, "Enables controlled spawning of non-<code>&#39;static</code> futures when …\nA scope to allow controlled spawning of non ’static …\nCancel all futures spawned with cancellation.\nA slighly optimized <code>collect</code> on the stream. Also useful …\nCreate a Scope object.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTotal number of futures spawned in this scope.\nNumber of futures remaining in this scope.\nCreates a <code>Scope</code> to spawn non-’static futures. The …\nA function that creates a scope and immediately awaits, …\nAn asynchronous function that creates a scope and …\nSpawn a future with the executor’s <code>task::spawn</code> …\nSpawn a function as a blocking future with executor’s …\nSpawn a cancellable future with the executor’s …\nThere you can find traits that are necessary for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.")